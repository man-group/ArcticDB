from typing import Any, List, Optional

from typing import overload
import arcticdb_ext.column_store
import arcticdb_ext.types
import numpy

class FixedTickRowBuilder:
    def __init__(self, *args, **kwargs) -> None: ...
    def end_row(self) -> None: ...
    def find_field(self, arg0: str) -> Optional[int]: ...
    def rollback_row(self) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.uint8]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.uint16]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.uint32]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.uint64]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.int8]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.int16]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.int32]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.int64]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.float32]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[numpy.float64]) -> None: ...
    @overload
    def set_array(self, arg0: int, arg1: numpy.ndarray[bool]) -> None: ...
    def set_array_bool(self, arg0: int, arg1: numpy.ndarray[bool]) -> None: ...
    def set_array_double(self, arg0: int, arg1: numpy.ndarray[numpy.float64]) -> None: ...
    def set_array_float(self, arg0: int, arg1: numpy.ndarray[numpy.float32]) -> None: ...
    def set_array_int16(self, arg0: int, arg1: numpy.ndarray[numpy.int16]) -> None: ...
    def set_array_int32(self, arg0: int, arg1: numpy.ndarray[numpy.int32]) -> None: ...
    def set_array_int64(self, arg0: int, arg1: numpy.ndarray[numpy.int64]) -> None: ...
    def set_array_int8(self, arg0: int, arg1: numpy.ndarray[numpy.int8]) -> None: ...
    def set_array_uint16(self, arg0: int, arg1: numpy.ndarray[numpy.uint16]) -> None: ...
    def set_array_uint32(self, arg0: int, arg1: numpy.ndarray[numpy.uint32]) -> None: ...
    def set_array_uint64(self, arg0: int, arg1: numpy.ndarray[numpy.uint64]) -> None: ...
    def set_array_uint8(self, arg0: int, arg1: numpy.ndarray[numpy.uint8]) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: int) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: float) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: float) -> None: ...
    @overload
    def set_scalar(self, arg0: int, arg1: bool) -> None: ...
    def set_scalar_bool(self, arg0: int, arg1: bool) -> None: ...
    def set_scalar_double(self, arg0: int, arg1: float) -> None: ...
    def set_scalar_float(self, arg0: int, arg1: float) -> None: ...
    def set_scalar_int16(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_int32(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_int64(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_int8(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_uint16(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_uint32(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_uint64(self, arg0: int, arg1: int) -> None: ...
    def set_scalar_uint8(self, arg0: int, arg1: int) -> None: ...
    def set_string(self, arg0: int, arg1: str) -> None: ...
    def set_string_array(self, arg0: int, arg1: numpy.ndarray) -> None: ...
    def set_string_list(self, arg0: int, arg1: List[str]) -> None: ...
    def start_row(self, arg0: int) -> None: ...
    def __enter__(self) -> FixedTickRowBuilder: ...
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> None: ...

class FixedTimestampAggregator:
    def __init__(self, arg0: SegmentHolder, arg1: arcticdb_ext.types.StreamDescriptor) -> None: ...
    def commit(self) -> None: ...
    def rollback_row(self, *args, **kwargs) -> Any: ...
    def start_row(self, *args, **kwargs) -> Any: ...
    @property
    def row_builder(self) -> Any: ...
    @property
    def row_count(self) -> int: ...

class SegmentHolder:
    def __init__(self) -> None: ...
    @property
    def segment(self) -> SegmentInMemory: ...

class SegmentInMemory:
    def __init__(self) -> None: ...
    def column(self, arg0: int) -> arcticdb_ext.column_store.Column: ...
    def empty(self) -> bool: ...
    def metadata(self) -> bytes: ...
    def string_pool(self) -> arcticdb_ext.column_store.StringPool: ...
    @property
    def num_columns(self) -> int: ...
    @property
    def row_count(self) -> int: ...
    @property
    def string_pool_size(self) -> int: ...

class TickReader:
    def __init__(self) -> None: ...
    def add_segment(self, arg0: SegmentInMemory) -> None: ...
    def at(self, arg0: int) -> tuple: ...
    @property
    def row_count(self) -> int: ...

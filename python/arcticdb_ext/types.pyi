from typing import ClassVar, List, Tuple, Union

class DataType:
    __members__: ClassVar[dict] = ...  # read-only
    ASCII_DYNAMIC64: ClassVar[DataType] = ...
    ASCII_FIXED64: ClassVar[DataType] = ...
    BOOL8: ClassVar[DataType] = ...
    FLOAT32: ClassVar[DataType] = ...
    FLOAT64: ClassVar[DataType] = ...
    INT16: ClassVar[DataType] = ...
    INT32: ClassVar[DataType] = ...
    INT64: ClassVar[DataType] = ...
    INT8: ClassVar[DataType] = ...
    NANOSECONDS_UTC64: ClassVar[DataType] = ...
    UINT16: ClassVar[DataType] = ...
    UINT32: ClassVar[DataType] = ...
    UINT64: ClassVar[DataType] = ...
    UINT8: ClassVar[DataType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Dimension:
    __members__: ClassVar[dict] = ...  # read-only
    Dim0: ClassVar[Dimension] = ...
    Dim1: ClassVar[Dimension] = ...
    Dim2: ClassVar[Dimension] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class FieldDescriptor:
    def __init__(self, arg0: TypeDescriptor, arg1: str) -> None: ...
    def name(self) -> str: ...
    def type(self) -> TypeDescriptor: ...

class IndexDescriptor:
    def __init__(self, arg0: int, arg1: IndexKind) -> None: ...
    def field_count(self) -> int: ...
    def kind(self) -> IndexKind: ...

class IndexKind:
    __members__: ClassVar[dict] = ...  # read-only
    ROWCOUNT: ClassVar[IndexKind] = ...
    STRING: ClassVar[IndexKind] = ...
    TIMESTAMP: ClassVar[IndexKind] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class StreamDescriptor:
    def __init__(self, arg0: Union[int,str], arg1: IndexDescriptor, arg2: List[FieldDescriptor]) -> None: ...
    def id(self) -> Union[int,str]: ...

class TimestampRange:
    def __init__(self, arg0: object, arg1: object) -> None: ...
    def as_tuple(self) -> Tuple[int,int]: ...
    @property
    def end_nanos_utc(self) -> int: ...
    @property
    def start_nanos_utc(self) -> int: ...

class TypeDescriptor:
    def __init__(self, arg0: DataType, arg1: Dimension) -> None: ...
    def data_type(self) -> DataType: ...
    def dimension(self) -> Dimension: ...

def as_dim_checked(arg0: int) -> Dimension: ...
def create_timestamp_index_stream_descriptor(arg0: Union[int,str], arg1: List[FieldDescriptor]) -> StreamDescriptor: ...

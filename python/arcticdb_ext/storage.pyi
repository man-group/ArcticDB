from typing import Any, ClassVar, List

import arcticdb_ext.exceptions

class AzureOverride:
    ca_cert_path: str
    container_name: str
    endpoint: str
    def __init__(self) -> None: ...

class ConfigResolver:
    def __init__(self, *args, **kwargs) -> None: ...

class DuplicateKeyException(arcticdb_ext.exceptions.ArcticException): ...

class KeyType:
    __members__: ClassVar[dict] = ...  # read-only
    APPEND_DATA: ClassVar[KeyType] = ...
    APPEND_REF: ClassVar[KeyType] = ...
    BACKUP_SNAPSHOT_REF: ClassVar[KeyType] = ...
    COLUMN_STATS: ClassVar[KeyType] = ...
    GENERATION: ClassVar[KeyType] = ...
    LOCK: ClassVar[KeyType] = ...
    LOG: ClassVar[KeyType] = ...
    LOG_COMPACTED: ClassVar[KeyType] = ...
    METRICS: ClassVar[KeyType] = ...
    MULTI_KEY: ClassVar[KeyType] = ...
    OFFSET: ClassVar[KeyType] = ...
    PARTITION: ClassVar[KeyType] = ...
    SNAPSHOT: ClassVar[KeyType] = ...
    SNAPSHOT_REF: ClassVar[KeyType] = ...
    SNAPSHOT_TOMBSTONE: ClassVar[KeyType] = ...
    STORAGE_INFO: ClassVar[KeyType] = ...
    STREAM_GROUP: ClassVar[KeyType] = ...
    SYMBOL_LIST: ClassVar[KeyType] = ...
    TABLE_DATA: ClassVar[KeyType] = ...
    TABLE_INDEX: ClassVar[KeyType] = ...
    TOMBSTONE: ClassVar[KeyType] = ...
    TOMBSTONE_ALL: ClassVar[KeyType] = ...
    VERSION: ClassVar[KeyType] = ...
    VERSION_JOURNAL: ClassVar[KeyType] = ...
    VERSION_REF: ClassVar[KeyType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Library:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def config(self) -> object: ...
    @property
    def library_path(self) -> str: ...
    @property
    def open_mode(self) -> OpenMode: ...

class LibraryIndex:
    def __init__(self, arg0: str) -> None: ...
    @classmethod
    def create_from_resolver(cls, arg0: str, arg1: ConfigResolver) -> LibraryIndex: ...
    def get_library(self, arg0: str, arg1: OpenMode) -> Library: ...
    def list_libraries(self, arg0: str) -> List[str]: ...

class LibraryManager:
    def __init__(self, arg0: Library) -> None: ...
    def get_library(self, library_path: str, storage_override: StorageOverride = ...) -> Library: ...
    def get_library_config(self, library_path: str, override: StorageOverride = ...) -> object: ...
    def has_library(self, arg0: str) -> bool: ...
    def is_library_config_ok(self, library_path: str, throw_on_failure: bool = ...) -> bool: ...
    def list_libraries(self) -> List[str]: ...
    def remove_library_config(self, arg0: str) -> None: ...
    def write_library_config(self, lib_cfg: object, library_path: str, override: StorageOverride = ..., test_only_validation_toggle: bool = ...) -> None: ...

class LmdbOverride:
    map_size: int
    def __init__(self) -> None: ...

class NoDataFoundException(arcticdb_ext.exceptions.ArcticException): ...

class OpenMode:
    __members__: ClassVar[dict] = ...  # read-only
    DELETE: ClassVar[OpenMode] = ...
    READ: ClassVar[OpenMode] = ...
    WRITE: ClassVar[OpenMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PermissionException(arcticdb_ext.exceptions.ArcticException): ...

class S3Override:
    bucket_name: str
    credential_key: str
    credential_name: str
    endpoint: str
    region: str
    use_virtual_addressing: bool
    def __init__(self) -> None: ...

class StorageOverride:
    def __init__(self) -> None: ...
    def set_azure_override(self, arg0: AzureOverride) -> None: ...
    def set_lmdb_override(self, arg0: LmdbOverride) -> None: ...
    def set_s3_override(self, arg0: S3Override) -> None: ...

def create_library_index(*args, **kwargs) -> Any: ...
def create_mem_config_resolver(*args, **kwargs) -> Any: ...

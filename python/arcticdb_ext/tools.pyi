from typing import Any, List, Tuple

import arcticdb_ext.codec
import arcticdb_ext.storage
CompactionId: str
CompactionLockName: str

class LibraryTool:
    def __init__(self, arg0: arcticdb_ext.storage.Library) -> None: ...
    def batch_key_exists(self, arg0) -> List[bool]: ...
    def clear_ref_keys(self) -> None: ...
    def count_keys(self, arg0: arcticdb_ext.storage.KeyType) -> int: ...
    def find_keys(self, *args, **kwargs) -> Any: ...
    def find_keys_for_id(self, *args, **kwargs) -> Any: ...
    def get_key_path(self, arg0) -> str: ...
    def read_to_segment(self, arg0) -> arcticdb_ext.codec.Segment: ...
    def remove(self, arg0) -> None: ...
    def write(self, arg0, arg1: arcticdb_ext.codec.Segment) -> None: ...

class S3Tool:
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str) -> None: ...
    def delete_bucket(self, arg0: str) -> None: ...
    def delete_object(self, arg0: str) -> None: ...
    def get_object(self, arg0: str) -> str: ...
    def get_object_size(self, arg0: str) -> int: ...
    def get_prefix_info(self, arg0: str) -> Tuple[int,int]: ...
    def list_bucket(self, arg0: str) -> List[str]: ...
    def write_object(self, arg0: str, arg1: str) -> None: ...

class StorageLock:
    def __init__(self, *args, **kwargs) -> None: ...
    def lock(self) -> None: ...
    def lock_timeout(self, arg0: int) -> None: ...
    def try_lock(self) -> bool: ...
    def unlock(self) -> None: ...

def print_mem_usage(arg0: str, arg1: int, arg2: str) -> None: ...

from typing import ClassVar

CODEC: LoggerId
DEBUG: LogLevel
ERROR: LogLevel
INFO: LogLevel
IN_MEM: LoggerId
LOCK: LoggerId
MEMORY: LoggerId
ROOT: LoggerId
SCHEDULE: LoggerId
STORAGE: LoggerId
TIMINGS: LoggerId
VERSION: LoggerId
WARN: LogLevel

class LogLevel:
    __members__: ClassVar[dict] = ...  # read-only
    DEBUG: ClassVar[LogLevel] = ...
    ERROR: ClassVar[LogLevel] = ...
    INFO: ClassVar[LogLevel] = ...
    WARN: ClassVar[LogLevel] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class LoggerId:
    __members__: ClassVar[dict] = ...  # read-only
    CODEC: ClassVar[LoggerId] = ...
    IN_MEM: ClassVar[LoggerId] = ...
    LOCK: ClassVar[LoggerId] = ...
    MEMORY: ClassVar[LoggerId] = ...
    ROOT: ClassVar[LoggerId] = ...
    SCHEDULE: ClassVar[LoggerId] = ...
    STORAGE: ClassVar[LoggerId] = ...
    TIMINGS: ClassVar[LoggerId] = ...
    VERSION: ClassVar[LoggerId] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def configure(py_log_conf: object, force: bool = ...) -> bool: ...
def flush_all() -> None: ...
def is_active(arg0: LoggerId, arg1: LogLevel) -> bool: ...
def log(arg0: LoggerId, arg1: LogLevel, arg2: str) -> None: ...

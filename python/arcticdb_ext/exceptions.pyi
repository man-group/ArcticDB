from typing import ClassVar

enum_value_to_prefix: dict

class ArcticException(RuntimeError): ...

class CompatibilityException(_ArcticLegacyCompatibilityException): ...

class ErrorCategory:
    __members__: ClassVar[dict] = ...  # read-only
    COMPATIBILITY: ClassVar[ErrorCategory] = ...
    INTERNAL: ClassVar[ErrorCategory] = ...
    MISSING_DATA: ClassVar[ErrorCategory] = ...
    NORMALIZATION: ClassVar[ErrorCategory] = ...
    SCHEMA: ClassVar[ErrorCategory] = ...
    SORTING: ClassVar[ErrorCategory] = ...
    STORAGE: ClassVar[ErrorCategory] = ...
    USER_INPUT: ClassVar[ErrorCategory] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ErrorCode:
    __members__: ClassVar[dict] = ...  # read-only
    E_ASSERTION_FAILURE: ClassVar[ErrorCode] = ...
    E_COLUMN_DOESNT_EXIST: ClassVar[ErrorCode] = ...
    E_DESCRIPTOR_MISMATCH: ClassVar[ErrorCode] = ...
    E_DUPLICATE_KEY: ClassVar[ErrorCode] = ...
    E_INCOMPATIBLE_INDEX: ClassVar[ErrorCode] = ...
    E_INCOMPATIBLE_OBJECTS: ClassVar[ErrorCode] = ...
    E_INVALID_ARGUMENT: ClassVar[ErrorCode] = ...
    E_INVALID_CHAR_IN_SYMBOL: ClassVar[ErrorCode] = ...
    E_INVALID_DECIMAL_STRING: ClassVar[ErrorCode] = ...
    E_INVALID_RANGE: ClassVar[ErrorCode] = ...
    E_INVALID_USER_ARGUMENT: ClassVar[ErrorCode] = ...
    E_KEY_NOT_FOUND: ClassVar[ErrorCode] = ...
    E_NO_SUCH_VERSION: ClassVar[ErrorCode] = ...
    E_OPERATION_NOT_SUPPORTED_WITH_PICKLED_DATA: ClassVar[ErrorCode] = ...
    E_RUNTIME_ERROR: ClassVar[ErrorCode] = ...
    E_STORED_CONFIG_ERROR: ClassVar[ErrorCode] = ...
    E_SYMBOL_NOT_FOUND: ClassVar[ErrorCode] = ...
    E_UNIMPLEMENTED_INPUT_TYPE: ClassVar[ErrorCode] = ...
    E_UNREADABLE_SYMBOL_LIST: ClassVar[ErrorCode] = ...
    E_UNRECOGNISED_COLUMN_STATS_VERSION: ClassVar[ErrorCode] = ...
    E_UNSORTED_DATA: ClassVar[ErrorCode] = ...
    E_UNSUPPORTED_COLUMN_TYPE: ClassVar[ErrorCode] = ...
    E_UNSUPPORTED_INDEX_TYPE: ClassVar[ErrorCode] = ...
    E_UPDATE_NOT_SUPPORTED: ClassVar[ErrorCode] = ...
    E_WRONG_SHAPE: ClassVar[ErrorCode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class InternalException(_ArcticLegacyCompatibilityException): ...

class MissingDataException(_ArcticLegacyCompatibilityException): ...

class NormalizationException(_ArcticLegacyCompatibilityException): ...

class SchemaException(_ArcticLegacyCompatibilityException): ...

class SortingException(_ArcticLegacyCompatibilityException): ...

class StorageException(_ArcticLegacyCompatibilityException): ...

class UnsortedDataException(SortingException): ...

class UserInputException(_ArcticLegacyCompatibilityException): ...

class _ArcticLegacyCompatibilityException(ArcticException): ...

def get_error_category(arg0: ErrorCode) -> ErrorCategory: ...

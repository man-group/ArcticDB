from typing import Any, List

class Buffer:
    def __init__(self) -> None: ...
    def size(self) -> int: ...

class DynamicFieldBuffer:
    def __init__(self, arg0, arg1: buffer, arg2: buffer) -> None: ...
    def as_field(self, *args, **kwargs) -> Any: ...

class FieldDecodingResult:
    def __init__(self) -> None: ...
    @property
    def shape_buffer(self) -> Any: ...
    @property
    def values_buffer(self) -> Any: ...

class FieldEncodingResult:
    def __init__(self) -> None: ...
    @property
    def buffer(self) -> Any: ...
    @property
    def encoded_field(self) -> object: ...

class Segment:
    def __init__(self) -> None: ...
    def fields(self) -> List[str]: ...
    def fields_size(self) -> int: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def header(self) -> object: ...

def decode_field(arg0, arg1: object, arg2: buffer) -> FieldDecodingResult: ...
def decode_segment(*args, **kwargs) -> Any: ...
def encode_field(arg0: object, arg1: DynamicFieldBuffer) -> FieldEncodingResult: ...
def encode_segment(arg0, arg1: object, arg2) -> Segment: ...

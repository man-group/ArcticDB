diff --git a/src/aws-cpp-sdk-identity-management/source/auth/STSProfileCredentialsProvider.cpp b/src/aws-cpp-sdk-identity-management/source/auth/STSProfileCredentialsProvider.cpp
index fd82b678fba..d17bf8a2329 100644
--- a/src/aws-cpp-sdk-identity-management/source/auth/STSProfileCredentialsProvider.cpp
+++ b/src/aws-cpp-sdk-identity-management/source/auth/STSProfileCredentialsProvider.cpp
@@ -33,6 +33,7 @@ STSProfileCredentialsProvider::STSProfileCredentialsProvider(const Aws::String&
         m_reloadFrequency(std::chrono::minutes(std::max(int64_t(5), static_cast<int64_t>(duration.count()))) - std::chrono::minutes(5)),
         m_stsClientFactory(stsClientFactory)
 {
+    AWS_LOGSTREAM_INFO(CLASS_TAG, "STSProfileCredentialsProvider init with token duration " << duration.count() << " minutes; m_reloadFrequency " << m_reloadFrequency.count() << " ms" );
 }
 
 AWSCredentials STSProfileCredentialsProvider::GetAWSCredentials()
@@ -45,16 +46,20 @@ AWSCredentials STSProfileCredentialsProvider::GetAWSCredentials()
 void STSProfileCredentialsProvider::RefreshIfExpired()
 {
     Utils::Threading::ReaderLockGuard guard(m_reloadLock);
-    if (!IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) || !m_credentials.IsExpiredOrEmpty())
+    if (!IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) && !m_credentials.IsExpiredOrEmpty())
     {
+       AWS_LOGSTREAM_INFO(CLASS_TAG, "RefreshIfExpired return IsTimeToRefresh " << IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) << " ; IsExpiredOrEmpty " << m_credentials.IsExpiredOrEmpty() );
        return;
     }
+    AWS_LOGSTREAM_INFO(CLASS_TAG, "RefreshIfExpired need to Reload IsTimeToRefresh " << IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) << " ; IsExpiredOrEmpty " << m_credentials.IsExpiredOrEmpty() );
 
     guard.UpgradeToWriterLock();
-    if (!IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) || !m_credentials.IsExpiredOrEmpty()) // double-checked lock to avoid refreshing twice
+    if (!IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) && !m_credentials.IsExpiredOrEmpty()) // double-checked lock to avoid refreshing twice
     {
+        AWS_LOGSTREAM_INFO(CLASS_TAG, "RefreshIfExpired return IsTimeToRefresh " << IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) << " ; IsExpiredOrEmpty " << m_credentials.IsExpiredOrEmpty() );
         return;
     }
+    AWS_LOGSTREAM_INFO(CLASS_TAG, "RefreshIfExpired need to Reload IsTimeToRefresh " << IsTimeToRefresh(static_cast<long>(m_reloadFrequency.count())) << " ; IsExpiredOrEmpty " << m_credentials.IsExpiredOrEmpty() );
 
     Reload();
 }
 
From 00d03be3736d92a2bcbf28cbad96617b7b6533f3 Mon Sep 17 00:00:00 2001
From: Jim Chen <jimchen@meta.com>
Date: Wed, 10 May 2023 07:10:45 -0700
Subject: [PATCH] Move warning disables to outside of
 unsafe_default_initialized_cv member

Summary:
According to MSVC doc [1], "warning numbers in the range 4700-4999 are associated with code generation. For these warnings, the state of the warning in effect when the compiler reaches the function definition remains in effect for the rest of the function." Therefore, the warning disables inside the `unsafe_default_initialized_cv` member function should be outside of the function.

[1] https://learn.microsoft.com/en-us/cpp/preprocessor/warning

Reviewed By: Orvid, 8Keep

Differential Revision: D45609862

fbshipit-source-id: 7cf28fe9c0e6da1395f03d1ede3fe27ba7f5595b
---
 folly/Utility.h | 23 ++++++++++++-----------
 1 file changed, 12 insertions(+), 11 deletions(-)

diff --git a/folly/Utility.h b/folly/Utility.h
index 4a4d02c8170..6325e83f639 100644
--- a/folly/Utility.h
+++ b/folly/Utility.h
@@ -471,29 +471,30 @@ using moveonly_::NonCopyableNonMovable;
 //      store_value_into_int_ptr(&value); // suppresses possible warning
 //      use_value(value); // suppresses possible warning
 struct unsafe_default_initialized_cv {
+  FOLLY_PUSH_WARNING
+  // MSVC requires warning disables to be outside of function definition
+  // Uninitialized local variable 'uninit' used
+  FOLLY_MSVC_DISABLE_WARNING(4700)
+  // Potentially uninitialized local variable 'uninit' used
+  FOLLY_MSVC_DISABLE_WARNING(4701)
+  // Potentially uninitialized local pointer variable 'uninit' used
+  FOLLY_MSVC_DISABLE_WARNING(4703)
+  FOLLY_GNU_DISABLE_WARNING("-Wuninitialized")
+  // Clang doesn't implement -Wmaybe-uninitialized and warns about it
+  FOLLY_GCC_DISABLE_WARNING("-Wmaybe-uninitialized")
   template <typename T>
   FOLLY_ERASE constexpr /* implicit */ operator T() const noexcept {
 #if defined(__cpp_lib_is_constant_evaluated)
 #if __cpp_lib_is_constant_evaluated >= 201811L
     if (!std::is_constant_evaluated()) {
       T uninit;
-      FOLLY_PUSH_WARNING
-      // Uninitialized local variable 'uninit' used
-      FOLLY_MSVC_DISABLE_WARNING(4700)
-      // Potentially uninitialized local variable 'uninit' used
-      FOLLY_MSVC_DISABLE_WARNING(4701)
-      // Potentially uninitialized local pointer variable 'uninit' used
-      FOLLY_MSVC_DISABLE_WARNING(4703)
-      FOLLY_GNU_DISABLE_WARNING("-Wuninitialized")
-      // Clang doesn't implement -Wmaybe-uninitialized and warns about it
-      FOLLY_GCC_DISABLE_WARNING("-Wmaybe-uninitialized")
       return uninit;
-      FOLLY_POP_WARNING
     }
 #endif
 #endif
     return T();
   }
+  FOLLY_POP_WARNING
 };
 FOLLY_INLINE_VARIABLE constexpr unsafe_default_initialized_cv
     unsafe_default_initialized{};

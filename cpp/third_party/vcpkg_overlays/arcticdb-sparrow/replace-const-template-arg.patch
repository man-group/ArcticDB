diff --git a/include/sparrow/layout/run_end_encoded_layout/run_end_encoded_iterator.hpp b/include/sparrow/layout/run_end_encoded_layout/run_end_encoded_iterator.hpp
index 86017a2..30e61e3 100644
--- a/include/sparrow/layout/run_end_encoded_layout/run_end_encoded_iterator.hpp
+++ b/include/sparrow/layout/run_end_encoded_layout/run_end_encoded_iterator.hpp
@@ -26,16 +26,16 @@ namespace sparrow
 
     // this iteratas over the **actual** values of the run encoded array
     // Ie nullabes values, not values !!!
-    template <bool CONST>
+    template <bool CONSTT>
     class run_encoded_array_iterator : public iterator_base<
-                                           run_encoded_array_iterator<CONST>,
+                                           run_encoded_array_iterator<CONSTT>,
                                            array_traits::const_reference,
                                            std::forward_iterator_tag,
                                            array_traits::const_reference>
     {
     private:
 
-        using array_ptr_type = std::conditional_t<CONST, const run_end_encoded_array*, run_end_encoded_array*>;
+        using array_ptr_type = std::conditional_t<CONSTT, const run_end_encoded_array*, run_end_encoded_array*>;
 
     public:
 
@@ -56,8 +56,8 @@ namespace sparrow
         friend class iterator_access;
     };
 
-    template <bool CONST>
-    run_encoded_array_iterator<CONST>::run_encoded_array_iterator(
+    template <bool CONSTT>
+    run_encoded_array_iterator<CONSTT>::run_encoded_array_iterator(
         array_ptr_type array_ptr,
         std::uint64_t index,
         std::uint64_t run_end_index
@@ -70,14 +70,14 @@ namespace sparrow
     {
     }
 
-    template <bool CONST>
-    bool run_encoded_array_iterator<CONST>::equal(const run_encoded_array_iterator& rhs) const
+    template <bool CONSTT>
+    bool run_encoded_array_iterator<CONSTT>::equal(const run_encoded_array_iterator& rhs) const
     {
         return m_index == rhs.m_index;
     }
 
-    template <bool CONST>
-    void run_encoded_array_iterator<CONST>::increment()
+    template <bool CONSTT>
+    void run_encoded_array_iterator<CONSTT>::increment()
     {
         ++m_index;
         --m_runs_left;
@@ -88,8 +88,8 @@ namespace sparrow
         }
     }
 
-    template <bool CONST>
-    typename array_traits::const_reference run_encoded_array_iterator<CONST>::dereference() const
+    template <bool CONSTT>
+    typename array_traits::const_reference run_encoded_array_iterator<CONSTT>::dereference() const
     {
         return array_element(*p_encoded_values_array, static_cast<std::size_t>(m_run_end_index));
     }

[build-system]
requires = ["setuptools", "wheel", "pip"]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
environment-pass = """ARCTIC_CMAKE_PRESET CMAKE_BUILD_PARALLEL_LEVEL\
    VCPKG_BINARY_SOURCES VCPKG_NUGET_USER VCPKG_NUGET_TOKEN VCPKG_MAN_NUGET_USER VCPKG_MAN_NUGET_TOKEN"""
build-frontend = "build"
test-extras = "Testing"

[tool.cibuildwheel.linux]
# See also build_many_linux_image.sh
before-all = """
[[ -e /etc/arcticdb_deps_installed ]] || { yum update -y && yum install -y zip \
    openssl-devel cyrus-sasl-devel devtoolset-11 devtoolset-11-libatomic-devel libcurl-devel ; }
{project}/build_tooling/prep_cpp_build.sh
{project}/build_tooling/vcpkg_caching.sh
"""
before-build = "env"
build = "cp*-manylinux_x86_64"
manylinux-x86_64-image = "ghcr.io/man-group/cibuildwheel_manylinux:latest"

[tool.cibuildwheel.windows]
build = "cp*-win_amd64"
before-all = "bash {project}/build_tooling/prep_cpp_build.sh"
before-build = "set"

[tool.cibuildwheel.macos]
build = "cp*-macosx_15_0_arm64"

[tool.ruff]
line-length = 120

[tool.black]
line-length = 120
target_version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
preview = true
# This must be kept in sync with the version in setup.cfg.
exclude = '''
/(
  | \.git
  | \.github
  | \.mypy_cache
  | \.vscode
  | \.idea
  | build_tooling
  | cpp
  | docs
  | static
)/
'''

[tool.pytest.ini_options]
markers = [
    "storage: marks a test as a test against real storage (deselect with: -m 'not storage')",
    "dedup: marks deduplication tests",
    "authentication: marks a test for authentication group (deselect with: -m 'not authentication')",
    "pipeline: Pipeline tests (deselect with: -m 'not pipeline')",
    "skip_fixture_params: will instruct fixture that supports excluding fixture values, which values to be excluded",
    "only_fixture_params: will instruct fixture supporting that to include only parameters from the list",
    "bug_ids: allows specifying bug ids list the tests is based on or depends",
    "priority0: Most important tests group",
    "compat: Mark from physical folder",
    "integration: Mark from physical folder",
    "unit: Mark from physical folder",
    "stress: Mark from physical folder",
    "nonreg: Mark from physical folder",
    "sanitizers: Mark from physical folder",
    "hypothesis: Mark from physical folder",
    "arcticdb: Mark from physical folder",
    "version_store: Mark from physical folder",
    "toolbox: Mark from physical folder",
    "lmdb: Mark from test usage for execution against LMDB storage",
    "mem: Mark from test usage for execution against In-memory storage",
    "s3: Mark from test usage for execution against Simulated S3 storage",
    "gcp: Mark from test usage for execution against Simulated GCP storage",
    "azurite: Mark from test usage for execution against Simulated Azurite storage",
    "nfs: Mark from test usage for execution against Simulated NFS S3 storage",
    "mongo: Mark from test usage for execution against Mongo storage",
    "real_s3: Mark from test usage for execution against AWS S3 storage",
    "real_azure: Mark from test usage for execution against Azure storage",
    "real_gcp: Mark from test usage for execution against GCP storage",
    "dynamic_schema: marks test using dynamic_schema=True",
    "empty_types: marks test using empty_types=True",
    "delayed_deletes: marks test using delayed_deletes=True",
    "sync_passive: marks test using sync_passive=True",
    "use_tombstones: marks test using use_tombstones=True",
    "segment_size: marks test using any of library segment size settings",
    "dynamic_strings: marks tests using dynamic_strings=True",
    "bucketize_dynamic: marks tests using bucketize_dynamic=True",
    "prune_previous: marks tests using prune_previous_version=True",
    "encoding_v2: marks tests that use V2 encoding"
]

{
    "basic_functions.BasicFunctions.peakmem_read": {
        "code": "class BasicFunctions:\n    def peakmem_read(self, rows, num_symbols):\n        lib = self.ac[get_prewritten_lib_name(rows)]\n        COLS = ['value']\n        _ = [lib.read(f\"{sym}_sym\", columns=COLS).data for sym in range(num_symbols)]\n\n    def setup(self, rows, num_symbols):\n        pass",
        "name": "basic_functions.BasicFunctions.peakmem_read",
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "5e6c3213053ee73a7af286ea4bb673fbe2416789ef287f0d959e71b679bbb154"
    },
    "basic_functions.BasicFunctions.peakmem_read_batch": {
        "code": "class BasicFunctions:\n    def peakmem_read_batch(self, rows, num_symbols):\n        lib = self.ac[get_prewritten_lib_name(rows)]\n        COLS = ['value']\n        read_reqs = [ReadRequest(f\"{sym}_sym\", columns=COLS) for sym in range(num_symbols)]\n        _ = lib .read_batch(read_reqs)\n\n    def setup(self, rows, num_symbols):\n        pass",
        "name": "basic_functions.BasicFunctions.peakmem_read_batch",
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "74e82a4d1f48848510a2b9555cd7f1aa820ba65319fc6e5d6fbabe4a1e6c6c4e"
    },
    "basic_functions.BasicFunctions.peakmem_write": {
        "code": "class BasicFunctions:\n    def peakmem_write(self, rows, num_symbols):\n        lib = self.get_fresh_lib()\n        for sym in range(num_symbols):\n            lib.write(f\"{sym}_sym\", generate_pseudo_random_dataframe(rows))\n\n    def setup(self, rows, num_symbols):\n        pass",
        "name": "basic_functions.BasicFunctions.peakmem_write",
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "990d89fbe0afb1391d2765fa95483233faf69f2351c3d055bd778ca38c97fbc3"
    },
    "basic_functions.BasicFunctions.peakmem_write_batch": {
        "code": "class BasicFunctions:\n    def peakmem_write_batch(self, rows, num_symbols):\n        lib = self.get_fresh_lib()\n        df = generate_pseudo_random_dataframe(rows)\n        payloads = [WritePayload(f\"{sym}_sym\", df) for sym in range(num_symbols)]\n        lib.write_batch(payloads)\n\n    def setup(self, rows, num_symbols):\n        pass",
        "name": "basic_functions.BasicFunctions.peakmem_write_batch",
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "8bf80ce74472859911de6280d18bce952ccec441507184128381e6f1aa7909e5"
    },
    "basic_functions.BasicFunctions.peakmem_write_staged": {
        "code": "class BasicFunctions:\n    def peakmem_write_staged(self, rows, _):\n        lib = self.get_fresh_lib()\n        lib.write(\"staged_sym\", generate_pseudo_random_dataframe(rows))\n\n    def setup(self, rows, num_symbols):\n        pass",
        "name": "basic_functions.BasicFunctions.peakmem_write_staged",
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "f2d9d5d7cb5e6f9a042df9b0cc5068671810c8c36be067db58b4eac718395dd9"
    },
    "basic_functions.BasicFunctions.time_read": {
        "code": "class BasicFunctions:\n    def time_read(self, rows, num_symbols):\n        lib = self.ac[get_prewritten_lib_name(rows)]\n        COLS = ['value']\n        _ = [lib.read(f\"{sym}_sym\", columns=COLS).data for sym in range(num_symbols)]\n\n    def setup(self, rows, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "basic_functions.BasicFunctions.time_read",
        "number": 5,
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "d5826130b32802cc47be4cfc06a65b183f9478c98f7474c6f4f7969c8d31b4de",
        "warmup_time": -1
    },
    "basic_functions.BasicFunctions.time_read_batch": {
        "code": "class BasicFunctions:\n    def time_read_batch(self, rows, num_symbols):\n        lib = self.ac[get_prewritten_lib_name(rows)]\n        COLS = ['value']\n        read_reqs = [ReadRequest(f\"{sym}_sym\", columns=COLS) for sym in range(num_symbols)]\n        _ = lib .read_batch(read_reqs)\n\n    def setup(self, rows, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "basic_functions.BasicFunctions.time_read_batch",
        "number": 5,
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "221f1ab3d7dead883f4f87a851e8714f0af2b3a8e588827bbd35e678d1d12f44",
        "warmup_time": -1
    },
    "basic_functions.BasicFunctions.time_write": {
        "code": "class BasicFunctions:\n    def time_write(self, rows, num_symbols):\n        lib = self.get_fresh_lib()\n        for sym in range(num_symbols):\n            lib.write(f\"{sym}_sym\", generate_pseudo_random_dataframe(rows))\n\n    def setup(self, rows, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "basic_functions.BasicFunctions.time_write",
        "number": 5,
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "083fe6e45bc2fe6ad730129f3ffbe520cf72371feaf468ee3a180b8837063769",
        "warmup_time": -1
    },
    "basic_functions.BasicFunctions.time_write_batch": {
        "code": "class BasicFunctions:\n    def time_write_batch(self, rows, num_symbols):\n        lib = self.get_fresh_lib()\n        df = generate_pseudo_random_dataframe(rows)\n        payloads = [WritePayload(f\"{sym}_sym\", df) for sym in range(num_symbols)]\n        lib.write_batch(payloads)\n\n    def setup(self, rows, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "basic_functions.BasicFunctions.time_write_batch",
        "number": 5,
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "9b3983610c75c4e231db88bf79e514496f507b43d4be710a06d1be4a038ee2dc",
        "warmup_time": -1
    },
    "basic_functions.BasicFunctions.time_write_staged": {
        "code": "class BasicFunctions:\n    def time_write_staged(self, rows, num_symbols):\n        lib = self.get_fresh_lib()\n        for sym in range(num_symbols):\n            lib.write(f\"{sym}_sym\", generate_pseudo_random_dataframe(rows), staged=True)\n\n    def setup(self, rows, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "basic_functions.BasicFunctions.time_write_staged",
        "number": 5,
        "param_names": [
            "rows",
            "num_symbols"
        ],
        "params": [
            [
                "1000",
                "2000"
            ],
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "913b6f5bbe2861dc7929f8d85b19cc379ba5075911d4796ac0319ab56b32024b",
        "warmup_time": -1
    },
    "list_functions.ListFunctions.peakmem_list_symbols": {
        "code": "class ListFunctions:\n    def peakmem_list_symbols(self, num_symbols):\n        lib = self.ac[f\"{num_symbols}_num_symbols\"]\n        _ = lib.list_symbols()\n\n    def setup(self, num_symbols):\n        pass",
        "name": "list_functions.ListFunctions.peakmem_list_symbols",
        "param_names": [
            "num_symbols"
        ],
        "params": [
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "1b384df5edea31dcb41363008c553adee100e2e01271beaa333ccc0e58ea6259"
    },
    "list_functions.ListFunctions.peakmem_list_versions": {
        "code": "class ListFunctions:\n    def peakmem_list_versions(self, num_symbols):\n        lib = self.ac[f\"{num_symbols}_num_symbols\"]\n        _ = lib.list_versions()\n\n    def setup(self, num_symbols):\n        pass",
        "name": "list_functions.ListFunctions.peakmem_list_versions",
        "param_names": [
            "num_symbols"
        ],
        "params": [
            [
                "500",
                "1000"
            ]
        ],
        "timeout": 6000,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "b391f2d4b0210dd7656015ecc28ee85a002ab81b3919b86964bfd70fb254ff56"
    },
    "list_functions.ListFunctions.time_has_symbol": {
        "code": "class ListFunctions:\n    def time_has_symbol(self, num_symbols):\n        lib = self.ac[f\"{num_symbols}_num_symbols\"]\n        _ = lib.has_symbol(\"500_sym\")\n\n    def setup(self, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "list_functions.ListFunctions.time_has_symbol",
        "number": 5,
        "param_names": [
            "num_symbols"
        ],
        "params": [
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "83e945600be63943662ae6c05b5375361895ed25adc319ad6a5d2c60cac89dd6",
        "warmup_time": -1
    },
    "list_functions.ListFunctions.time_list_symbols": {
        "code": "class ListFunctions:\n    def time_list_symbols(self, num_symbols):\n        lib = self.ac[f\"{num_symbols}_num_symbols\"]\n        _ = lib.list_symbols()\n\n    def setup(self, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "list_functions.ListFunctions.time_list_symbols",
        "number": 5,
        "param_names": [
            "num_symbols"
        ],
        "params": [
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "4c6ee882dfe48da6060cafe26ab08aeac65f6a6db4e1da92395c8d5a8001af1b",
        "warmup_time": -1
    },
    "list_functions.ListFunctions.time_list_versions": {
        "code": "class ListFunctions:\n    def time_list_versions(self, num_symbols):\n        lib = self.ac[f\"{num_symbols}_num_symbols\"]\n        _ = lib.list_versions()\n\n    def setup(self, num_symbols):\n        pass",
        "min_run_count": 2,
        "name": "list_functions.ListFunctions.time_list_versions",
        "number": 5,
        "param_names": [
            "num_symbols"
        ],
        "params": [
            [
                "500",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 6000,
        "type": "time",
        "unit": "seconds",
        "version": "48bcd62fefa425b4f29c1bd9dd9a9d09a062f56b42046cdf6cc819090f576925",
        "warmup_time": -1
    },
    "version": 2
}
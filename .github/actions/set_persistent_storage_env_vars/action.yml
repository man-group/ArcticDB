name: 'Set Persistent storages env variables'
description: 'Set the necessary variables for Persistent storage tests'
inputs:
  bucket:            {default: 'arcticdb-ci-test-bucket-02', type: string, description: The name of the S3 bucket that we will test against}
  bucket_gcp:        {default: 'arcticdb-github', type: string, description: The name of the GCP bucket that we will test against}
  endpoint:          {default: 'https://s3.eu-west-1.amazonaws.com', type: string, description: The address of the S3 endpoint}
  endpoint_gcp:      {default: 'https://storage.googleapis.com', type: string, description: The address of the GCP endpoint}
  region:            {default: 'eu-west-1', type: string, description: The S3 region of the bucket}
  aws_access_key:    {required: true, type: string, description: The value for the AWS Access key}      
  aws_secret_key:    {required: true, type: string, description: The value for the AWS Secret key}
  gcp_access_key:    {required: true, type: string, description: The value for the GCP Access key}      
  gcp_secret_key:    {required: true, type: string, description: The value for the GCP Secret key}
  azure_container:    {required: true, type: string, description: The value for the Azure container}
  azure_connection_string:    {required: true, type: string, description: The value for the Azure connection string}
  strategy_branch:   {default: 'ignore', type: string, description: a unique combination of the parameters for the given job strategy branch, e.g. linux_cp36} 
  shared_storage_prefix:   {default: 'none', type: string, description: a prefix string that will be used for persistent storage}
  persistent_storage:      {default: "no", type: string, description: Specifies whether the python tests should tests against real storages e.g. AWS S3  }
runs:
  using: "composite"
  steps:
    - name: Set real storage variables
      shell: bash
      
      run: |
        # Common
        echo "ARCTICDB_PERSISTENT_STORAGE_TESTS=1" >> $GITHUB_ENV
        echo "ARCTICDB_PERSISTENT_STORAGE_UNIQUE_ID=${{ github.ref_name }}_${{ github.run_id }}" >> $GITHUB_ENV
        echo "ARCTICDB_PERSISTENT_STORAGE_STRATEGY_BRANCH=${{ inputs.strategy_branch }}" >> $GITHUB_ENV
        # This is the top level path for all test, this is where to write data that should be shared between jobs (e.g. seed job)
        if [ "${{ inputs.shared_storage_prefix }}" == "none" ]; then
          echo "ARCTICDB_PERSISTENT_STORAGE_SHARED_PATH_PREFIX=ci_tests/${{ github.ref_name }}_${{ github.run_id }}" >> $GITHUB_ENV
        else
          echo "ARCTICDB_PERSISTENT_STORAGE_SHARED_PATH_PREFIX=ci_tests/${{ inputs.shared_storage_prefix }}" >> $GITHUB_ENV
        fi
        # This is a path that should be used for specific job and its tests to avoid cross contamination and race conditions
        echo "ARCTICDB_PERSISTENT_STORAGE_UNIQUE_PATH_PREFIX=ci_tests/${{ github.ref_name }}_${{ github.run_id }}_${{ inputs.strategy_branch }}" >> $GITHUB_ENV

        # S3 Specific
        echo "ARCTICDB_REAL_S3_BUCKET=${{ inputs.bucket }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_ENDPOINT=${{ inputs.endpoint }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_REGION=${{ inputs.region }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_CLEAR=1" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_ACCESS_KEY=${{ inputs.aws_access_key }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_SECRET_KEY=${{ inputs.aws_secret_key }}" >> $GITHUB_ENV
        ARCTICDB_REAL_S3_STS_TEST_CREDENTIALS_POSTFIX=$(shuf -i 0-999 -n 1)_$(date -u +'%Y-%m-%dT%H_%M_%S_%6N')
        echo "ARCTICDB_REAL_S3_STS_TEST_CREDENTIALS_POSTFIX=${ARCTICDB_REAL_S3_STS_TEST_CREDENTIALS_POSTFIX}" >> $GITHUB_ENV
        ## This name prefix (STS_PREFIX -> ARCTICDB_REAL_S3_STS_PREFIX) is connected to another cleanup process at:
        ## python/utils/s3_roles_delete.py (make sure to synchronize changes)
        STS_PREFIX=gh_sts_test
        echo "ARCTICDB_REAL_S3_STS_PREFIX=${STS_PREFIX}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_STS_TEST_USERNAME=${STS_PREFIX}_user_${ARCTICDB_REAL_S3_STS_TEST_CREDENTIALS_POSTFIX}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_STS_TEST_ROLE=${STS_PREFIX}_role_${ARCTICDB_REAL_S3_STS_TEST_CREDENTIALS_POSTFIX}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_S3_STS_TEST_POLICY_NAME=${STS_PREFIX}_policy_name_${ARCTICDB_REAL_S3_STS_TEST_CREDENTIALS_POSTFIX}" >> $GITHUB_ENV

        # GCP Specific
        echo "ARCTICDB_REAL_GCP_ACCESS_KEY=${{ inputs.gcp_access_key }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_GCP_SECRET_KEY=${{ inputs.gcp_secret_key }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_GCP_BUCKET=${{ inputs.bucket_gcp }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_GCP_ENDPOINT=${{ inputs.endpoint_gcp }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_GCP_CLEAR=1" >> $GITHUB_ENV

        # AZURE Specific
        echo "ARCTICDB_REAL_AZURE_CONTAINER=${{ inputs.azure_container }}" >> $GITHUB_ENV
        echo "ARCTICDB_REAL_AZURE_CONNECTION_STRING=${{ inputs.azure_connection_string }}" >> $GITHUB_ENV

        # Against what storage type to run test?
        if [[ "${{inputs.persistent_storage}}" == "AWS_S3" ]]; then 
            echo "Storage tests will run with AWS_S3"
            echo "ARCTICDB_STORAGE_AWS_S3=1"  >> $GITHUB_ENV
            # NO GCP
            echo "ARCTICDB_STORAGE_GCP=0"  >> $GITHUB_ENV
            # No local tests
            echo "ARCTICDB_LOCAL_STORAGE_TESTS_ENABLED=0"  >> $GITHUB_ENV
            echo "ARCTICDB_PERSISTENT_STORAGE_TESTS_TYPE=aws_s3"  >> $GITHUB_ENV
            echo "PYTEST_ADD_TO_COMMAND_LINE= -m storage"  >> $GITHUB_ENV
        fi
        if [[ "${{inputs.persistent_storage}}" == "GCPXML" ]]; then 
            echo "Storage tests will run with GCP"
            echo "ARCTICDB_STORAGE_GCP=1"  >> $GITHUB_ENV
            # NO S3
            echo "ARCTICDB_STORAGE_AWS_S3=0"  >> $GITHUB_ENV
            # No local tests
            echo "ARCTICDB_LOCAL_STORAGE_TESTS_ENABLED=0"  >> $GITHUB_ENV
            echo "ARCTICDB_PERSISTENT_STORAGE_TESTS_TYPE=gcp"  >> $GITHUB_ENV
            echo "PYTEST_ADD_TO_COMMAND_LINE= -m storage "  >> $GITHUB_ENV
        fi
        if [[ "${{inputs.persistent_storage}}" == "AZURE" ]]; then 
            echo "Storage tests will run with AZURE"
            echo "ARCTICDB_STORAGE_AZURE=1"  >> $GITHUB_ENV
            # NO S3 and GCP
            echo "ARCTICDB_STORAGE_AWS_S3=0"  >> $GITHUB_ENV
            echo "ARCTICDB_STORAGE_GCP=0"  >> $GITHUB_ENV
            # No local tests
            echo "ARCTICDB_LOCAL_STORAGE_TESTS_ENABLED=0"  >> $GITHUB_ENV
            echo "ARCTICDB_PERSISTENT_STORAGE_TESTS_TYPE=azure"  >> $GITHUB_ENV
            echo "PYTEST_ADD_TO_COMMAND_LINE= -m storage "  >> $GITHUB_ENV
        fi

        # Enable all debug logs
        # echo "ARCTICDB_all_loglevel=debug" >> $GITHUB_ENV
        # echo "ARCTICDB_AWS_LogLevel_int=6" >> $GITHUB_ENV
        # echo "AZURE_LOG_LEVEL=1" >> $GITHUB_ENV

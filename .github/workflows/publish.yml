name: Publish to Pypi
on:
  workflow_call:
    inputs:
      environment: { type: string, required: true }
  workflow_dispatch:
    inputs:
      environment: { type: environment, required: true }
      run_id: { type: number, required: true }
run-name: Publish ${{github.ref}} to ${{inputs.environment}}
jobs:
  # GitHub Composite Actions cannot access secrets and Reusable Workflows cannot return artifacts, so duplicate for now:
  release_notes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    env:
      SYMBOLS_ARTIFACT: /tmp/symbols.tar.zst # Use absolute path to workaround a bug in action-gh-release
    steps:
      # Copy and pasted from the pypi job below, until GitHub adds selective artifact download
      - uses: actions/setup-node@v3
        if: inputs.run_id <= 0
        with:
          node-version: 16
      - run: npm install @actions/artifact
        if: inputs.run_id <= 0
      - id: download
        name: Fetch wheel artifacts
        if: inputs.run_id <= 0
        uses: actions/github-script@v6
        with:
          script: |
            const dhc = require("./node_modules/@actions/artifact/lib/internal/download-http-client.js");
            const ds = require("./node_modules/@actions/artifact/lib/internal/download-specification.js");
            const utils = require("./node_modules/@actions/artifact/lib/internal/utils.js");

            const cwd = process.cwd();
            const client = new dhc.DownloadHttpClient();
            const artifactsResponse = await client.listArtifacts();
            for (const artifact of artifactsResponse.value) {
                if (artifact.name.startsWith("build-metadata-follower-")) {
                  console.log(`Downloading ${artifact.name} to ${cwd}`);
                  const itemsResponse = await client.getContainerItems(artifact.name, artifact.fileContainerResourceUrl);
                  // Must match "symbols" in build.yml
                  const symbols_ext = artifact.name.search('windows') >= 0 ? ".pdb" : ".gz";
                  core.debug(`symbols_ext=${symbols_ext}`);
                  const items = itemsResponse.value.filter(i => i.path.endsWith(symbols_ext));
                  if (items.length < 1) {
                    core.error(`${artifact.name} does not have any ${symbols_ext} file.
                  Please locate the debug symbols and archive them to aid future support.`);
                  } else {
                    const downloadSpecs = ds.getDownloadSpecification(artifact.name, items, cwd, true);
                    core.debug(`downloadSpecs={JSON.stringify(downloadSpecs)}`);
                    await utils.createDirectoriesForArtifact(downloadSpecs.directoryStructure);
                    await client.downloadSingleArtifact(downloadSpecs.filesToDownload);
                  }
                } else {
                  console.log(`Ignoring ${artifact.name}`);
                }
            }
        continue-on-error: true

      - id: compress
        name: Compress debug symbols
        if: steps.download.outcome == 'success'
        run: tar -cvaf $SYMBOLS_ARTIFACT build-metadata-*
        continue-on-error: true

      - name: Checkout # Needed by the release action
        uses: actions/checkout@v3

      - id: changelog
        name: Release Changelog Builder
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          prerelease: ${{inputs.environment != 'ProdPypi'}}
          body: |
            ${{steps.changelog.outputs.changelog}}

            The wheels are on [Pypi](https://pypi.org/project/arcticdb/). Below are for debugging:
          files: ${{steps.compress.outcome == 'success' && env.SYMBOLS_ARTIFACT || ''}}


  pypi:
    environment: ${{inputs.environment}}
    runs-on: ubuntu-latest
    steps:
      - name: Gather wheels from run ${{inputs.run_id}}
        if: inputs.run_id > 0
        run: |
          gh run download ${{inputs.run_id}} -p 'wheel-*'
          mv wheel-*/* .
        env:
          GH_TOKEN: ${{github.token}}
          GH_REPO: ${{github.repository}}

      # Above `gh` command don't work on the current run, so will have to hack:
      - uses: actions/setup-node@v3
        if: inputs.run_id <= 0
        with:
          node-version: 16
      - run: npm install @actions/artifact
        if: inputs.run_id <= 0
      - name: Fetch wheel artifacts
        if: inputs.run_id <= 0
        uses: actions/github-script@v6
        with:
          script: |
            const dhc = require("./node_modules/@actions/artifact/lib/internal/download-http-client.js");
            const ds = require("./node_modules/@actions/artifact/lib/internal/download-specification.js");

            const cwd = process.cwd();
            const client = new dhc.DownloadHttpClient();
            const artifactsResponse = await client.listArtifacts();
            for (const artifact of artifactsResponse.value) {
                if (artifact.name.startsWith("wheel-")) {
                  console.log(`Downloading ${artifact.name} to ${cwd}`);
                  const itemsResponse = await client.getContainerItems(artifact.name, artifact.fileContainerResourceUrl);
                  const downloadSpecs = ds.getDownloadSpecification(artifact.name, itemsResponse.value, cwd, false);
                  await client.downloadSingleArtifact(downloadSpecs.filesToDownload);
                } else {
                  console.log(`Ignoring ${artifact.name}`);
                }
            }

      - name: Upload to Pypi
        run: |
            ls
            python3 -m pip install twine
            python3 -m twine upload --non-interactive *.whl
        env:
          TWINE_USERNAME: ${{vars.TWINE_USERNAME || secrets.TWINE_USERNAME}}
          TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
          TWINE_REPOSITORY: ${{vars.TWINE_REPOSITORY}}
          TWINE_REPOSITORY_URL: ${{vars.TWINE_REPOSITORY_URL}}
          TWINE_CERT: ${{vars.TWINE_CERT}}

name: Publish to Pypi
on:
  workflow_call:
    inputs:
      environment: { type: string, required: true }
  workflow_dispatch:
    inputs:
      environment: { type: environment, required: true }
      run_id: { type: number, required: true }
run-name: Publish ${{github.ref}} to ${{inputs.environment}}
env:
  RUN_ID: ${{ inputs.run_id || github.run_id }}
jobs:
  # GitHub Composite Actions cannot access secrets and Reusable Workflows cannot return artifacts, so duplicate for now:
  release_notes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    steps:
      - id: download
        name: Fetch wheel artifacts
        uses: actions/download-artifact@v4
        with:
            pattern: "build-metadata-build-python-wheels-*"
            run-id: ${{ env.RUN_ID }}
            github-token: ${{ github.token }}

      - id: download_wheels
        name: Fetch wheels
        uses: actions/download-artifact@v4
        with:
            pattern: "wheel-cp*"
            path: /tmp
            run-id: ${{ env.RUN_ID }}
            github-token: ${{ github.token }}
            merge-multiple: true
      
      - id: compress
        name: Compress metadata
        run: |
          for file in build-metadata-build-python-wheels-*; do
            identifier=$(echo "$file" | sed -E 's/build-metadata-build-python-wheels-(.*)/\1/')
            output_file="/tmp/build-metadata-${identifier}.tar.zst"
            tar --zstd -cf "$output_file" "$file"
          done

      - name: Checkout # Needed by the release action
        uses: actions/checkout@v3.3.0

      - id: changelog
        name: Release Changelog Builder
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: build_tooling/change_log.json

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          prerelease: ${{inputs.environment != 'ProdPypi'}}
          body: |
            ${{steps.changelog.outputs.changelog}}

            ---
            > The wheels are on [PyPI](https://pypi.org/project/arcticdb/). Below are for debugging:
          files: |
            ${{steps.compress.outcome == 'success' && '/tmp/build-metadata-*.tar.zst' || ''}}
            /tmp/*.whl


  pypi:
    environment: ${{inputs.environment}}
    runs-on: ubuntu-22.04
    if: ${{ contains(github.ref, vars.RC_SUFFIX) == false }}
    steps:
      - name: Gather wheels from run ${{ env.RUN_ID }}
        id: gather-wheels
        uses: actions/download-artifact@v4
        with:
            pattern: "wheel-cp*"
            merge-multiple: true
            run-id: ${{ env.RUN_ID }}
            github-token: ${{github.token}}
            
      - name: Skip uploading macos wheels for now
        run: |
            rm *macos*.whl
        continue-on-error: false
            
      - name: Upload to Pypi
        run: |
            ls
            python3 -m pip install twine
            python3 -m twine upload --non-interactive *.whl
        env:
          TWINE_USERNAME: ${{vars.TWINE_USERNAME || secrets.TWINE_USERNAME}}
          TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
          TWINE_REPOSITORY: ${{vars.TWINE_REPOSITORY}}
          TWINE_REPOSITORY_URL: ${{vars.TWINE_REPOSITORY_URL}}
          TWINE_CERT: ${{vars.TWINE_CERT}}

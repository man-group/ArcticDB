name: Publish to Pypi
on:
  workflow_call:
    inputs:
      environment: { type: string, required: true }
  workflow_dispatch:
    inputs:
      environment: { type: environment, required: true }
      run_id: { type: number, required: false, default: 0 }
jobs:
  publish:
    environment: ${{inputs.environment}}
    runs-on: ubuntu-latest
    steps:
      - name: Gather wheels from run ${{inputs.run_id}}
        if: inputs.run_id > 0
        run: |
          gh run download ${{inputs.run_id}} -p 'wheel-*'
          mv wheel-*/* .
        env:
          GH_TOKEN: ${{github.token}}
          GH_REPO: ${{github.repository}}

      # Above `gh` command don't work on the current run, so will have to hack:
      - uses: actions/setup-node@v3
        if: inputs.run_id <= 0
        with:
          node-version: 16
      - run: npm install @actions/artifact
        if: inputs.run_id <= 0
      - name: Fetch wheel artifacts
        if: inputs.run_id <= 0
        uses: actions/github-script@v6
        with:
          script: |
            const dhc = require("./node_modules/@actions/artifact/lib/internal/download-http-client.js");
            const ds = require("./node_modules/@actions/artifact/lib/internal/download-specification.js");

            const cwd = process.cwd();
            const client = new dhc.DownloadHttpClient();
            const artifactsResponse = await client.listArtifacts();
            for (const artifact of artifactsResponse.value) {
                if (artifact.name.startsWith("wheel-")) {
                  console.log(`Downloading ${artifact.name} to ${cwd}`);
                  const itemsResponse = await client.getContainerItems(artifact.name, artifact.fileContainerResourceUrl);
                  const downloadSpecs = ds.getDownloadSpecification(artifact.name, itemsResponse.value, cwd, false);
                  await client.downloadSingleArtifact(downloadSpecs.filesToDownload);
                } else {
                  console.log(`Ignoring ${artifact.name}`);
                }
            }

      - name: Upload to Pypi
        run: |
            ls
            python3 -m pip install twine
            python3 -m twine upload --non-interactive *.whl
        env:
          TWINE_USERNAME: ${{vars.TWINE_USERNAME || secrets.TWINE_USERNAME}}
          TWINE_PASSWORD: ${{vars.TWINE_PASSWORD || secrets.TWINE_PASSWORD}}
          TWINE_REPOSITORY: ${{vars.TWINE_REPOSITORY}}
          TWINE_REPOSITORY_URL: ${{vars.TWINE_REPOSITORY_URL}}
          TWINE_CERT: ${{vars.TWINE_CERT}}

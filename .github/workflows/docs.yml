name: Docs
on:
  workflow_call:
    inputs:
      environment: { type: string, required: false }
  workflow_dispatch:
    inputs:
      environment: { type: environment, required: false }
      api_wheel: { type: string, description: Override the wheel to generate API docs from }
jobs:
  can_merge:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Detect runner Python implementation
        if: ${{!inputs.api_wheel}}
        run: |
          python3 -c 'import platform
          prefix = {"CPython": "cp", "PyPy": "pp"}[platform.python_implementation()]
          v = platform.python_version_tuple()
          print(f"PY_IMPL={prefix}{v[0]}{v[1]}")' | tee -a $GITHUB_ENV
  
      - id: download-wheel-artifact
        name: Download wheel artifact from last successful build
        if: ${{!inputs.api_wheel}}
        uses: dawidd6/action-download-artifact@v2
        with:
          name: wheel-${{env.PY_IMPL}}-manylinux_x86_64
          workflow: build.yml
          workflow_conclusion: success
          branch: master

      - name: Install documenation dependencies (including ArcticDB)
        run: |
          pip3 install mkdocs-material mkdocs-jupyter mkdocstrings[python] black pybind11-stubgen ${{inputs.api_wheel || '*.whl'}}

      - name: Stubfile generation for arcticdb_ext
        # stubfiles will be generated into docs/mkdocs/arcticdb_ext and so imported as arcticdb_ext by mkdocs when it builds
        # FIXME --ignore-all-errors may mask new errors and should be removed when we are compliant
        run: |  
          cd docs/mkdocs
          pybind11-stubgen arcticdb_ext.version_store --ignore-all-errors -o .

      - name: MkDocs build
        # FIXME mkdocs build --strict should be enabled when we are compliant
        run: |
          cd docs/mkdocs  
          mkdocs build -d /tmp/docs_build

      - name: Publish to Cloudflare Pages
        if: inputs.environment && vars.CLOUDFLARE_PAGE_BRANCH
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{vars.CLOUDFLARE_ACCOUNT_ID}}
          projectName: ${{vars.CLOUDFLARE_PAGES_PROJECT}}
          branch: ${{vars.CLOUDFLARE_PAGE_BRANCH}}
          directory: /tmp/docs_build

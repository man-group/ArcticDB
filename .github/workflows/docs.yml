name: Docs
on:
  workflow_call:
    inputs:
      environment: { type: string, required: false }
  workflow_dispatch:
    inputs:
      environment: { type: environment, required: false }
      api_wheel: { type: string, description: Override the wheel to generate API docs from }
jobs:
  docs:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Detect system Python implementation
        if: ${{!inputs.api_wheel}}
        run: |
          python3 -c 'import platform
          prefix = {"CPython": "cp", "PyPy": "pp"}[platform.python_implementation()]
          v = platform.python_version_tuple()
          print(f"PY_IMPL={prefix}{v[0]}{v[1]}")' | tee -a $GITHUB_ENV

      # Copy and pasted from publsh.yml, until GitHub adds selective artifact download
      - uses: actions/setup-node@v3
        if: ${{!inputs.api_wheel}}
        with:
          node-version: 16
      - run: npm install @actions/artifact
        if: ${{!inputs.api_wheel}}
      - id: download
        name: Fetch wheel artifacts
        if: ${{!inputs.api_wheel}}
        uses: actions/github-script@v6
        with:
          script: |
            const dhc = require("./node_modules/@actions/artifact/lib/internal/download-http-client.js");
            const ds = require("./node_modules/@actions/artifact/lib/internal/download-specification.js");

            const cwd = process.cwd();
            const client = new dhc.DownloadHttpClient();
            const artifactsResponse = await client.listArtifacts();
            for (const artifact of artifactsResponse.value) {
                if (artifact.name.startsWith("wheel-${{env.PY_IMPL}}-manylinux")) {
                  console.log(`Downloading ${artifact.name} to ${cwd}`);
                  const itemsResponse = await client.getContainerItems(artifact.name, artifact.fileContainerResourceUrl);
                  const downloadSpecs = ds.getDownloadSpecification(artifact.name, itemsResponse.value, cwd, false);
                  await client.downloadSingleArtifact(downloadSpecs.filesToDownload);
                } else {
                  console.log(`Ignoring ${artifact.name}`);
                }
            }

      - name: MkDocs
        run: |
          echo "::group::Pip"
          pip3 install mkdocs-material
          echo "::endgroup::"

          cd docs/mkdocs
          mkdocs build -d /tmp/docs_build

      - name: Sphinx
        run: |
          set -x
          echo "::group::Pip"
          ls
          pip3 install sphinx sphinx_rtd_theme ${{inputs.api_wheel || '*.whl'}}
          echo "::endgroup::"

          cd docs/sphinxdocs
          make html 2>&1 \
          | sed -r 's#^(([^:]*/site-packages/)?([^:]+.py):([^:]*):([1-9]+): )?WARNING: .*#::warning file=\3,line=\5::&#'
          mkdir /tmp/docs_build/api/
          mv build/html/* /tmp/docs_build/api/

      - name: Publish to Cloudflare Pages
        if: inputs.environment && vars.CLOUDFLARE_PAGE_BRANCH
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{vars.CLOUDFLARE_ACCOUNT_ID}}
          projectName: ${{vars.CLOUDFLARE_PAGES_PROJECT}}
          branch: ${{vars.CLOUDFLARE_PAGE_BRANCH}}
          directory: /tmp/docs_build

name: Docs Build (multi-version - 'Mike' build)
on:
  workflow_dispatch:
    inputs:
      version: { type: string, required: false, description: "The version to build (used in git and pypi). git-tag='v{version}-docs'.  If not specified then use selected branch and wheel from the last successful build."}
      latest: { type: boolean, required: false, description: Alias this version as the 'latest' stable docs.  This should be set for the latest stable release.}
      deploy: { type: boolean, required: false, description: Push the built docs to the docs-pages branch on github.}
  workflow_call:
    inputs:
      version: { type: string, required: true, description: "The version to build (used in git and pypi). git-tag='v{version}-docs'."}
      latest: { type: boolean, required: true, description: Alias this version as the 'latest' stable docs.  This should be set for the latest stable release.}
      deploy: { type: boolean, required: true, description: Push the built docs to the docs-pages branch on github.}
jobs:
  docs_build:
    runs-on: ubuntu-22.04
    environment: TestPypi
    permissions:
      contents: write
    steps:
      - name: Check inputs
        run: |
          if [ -z "${{ inputs.version }}" ] && ${{ inputs.latest }}; then
            echo "Should not label dev build as latest. Failing the job."
            exit 1
          fi
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{inputs.version && format('v{0}-docs', inputs.version) || github.ref}}

      - name: Fetch docs-pages branch
        run: git fetch origin docs-pages --depth=1

      - name: Detect runner Python implementation
        if: ${{!inputs.version}}
        run: |
          python3 -c 'import platform
          prefix = {"CPython": "cp", "PyPy": "pp"}[platform.python_implementation()]
          v = platform.python_version_tuple()
          print(f"PY_IMPL={prefix}{v[0]}{v[1]}")' | tee -a $GITHUB_ENV

      - id: download-wheel-artifact
        name: Download wheel artifact from last successful build
        if: ${{!inputs.version}}
        uses: dawidd6/action-download-artifact@v6
        with:
          name: wheel-${{env.PY_IMPL}}-manylinux_x86_64
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{github.ref}}

      # fixme install wheel

      - name: mkdocs build
        run: |
          set -x
          # 'mike' needs a git user to be set
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          cd docs/mkdocs
          python build.py ${{inputs.latest && '--latest'}} ${{inputs.version}} 
          
      - name: Deploy
        if: inputs.deploy
        run: git push -- origin docs-pages

name: Build with conda
on:
  push:
    branches:
      - master
  # For Pull-Requests, this runs the CI on merge commit
  # of HEAD with the target branch instead on HEAD, allowing
  # testing against potential new states which might have
  # been introduced in the target branch last commits.
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
  pull_request:

jobs:
  start_ec2_runner:
    uses: ./.github/workflows/ec2_runner_jobs.yml
    secrets: inherit
    permissions: write-all
    with:
      job_type: start

  linux:
    if: |
      always() &&
      !cancelled()
    needs: [start_ec2_runner]
    runs-on: ${{ needs.start_ec2_runner.result != 'failure' && needs.start_ec2_runner.outputs.label || 'ubuntu-latest'}}
    services:
      mongodb:
        image: mongo:4.4
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: recursive

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1.1.0
        id: cpu-cores

      - name: Install Conda environment from environment_unix.yml
        uses: mamba-org/setup-micromamba@v1.6.0
        with:
          environment-file: environment_unix.yml
          init-shell: >-
            bash
          cache-environment: true
          post-cleanup: 'all'

      - name: Build ArcticDB with conda (ARCTICDB_USING_CONDA=1)
        shell: bash -l {0}
        run: |
          # Protocol buffers compilation require not using build isolation.
          python -m pip install --no-build-isolation --no-deps -v -e .
        env:
          ARCTICDB_USING_CONDA: 1
          ARCTICDB_BUILD_CPP_TESTS: 1
          ARCTICDB_PROTOC_VERS: "4"

      - name: Build C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/linux-conda-release-build/
          make -j ${{ steps.cpu-cores.outputs.count }} arcticdb_rapidcheck_tests
          make -j ${{ steps.cpu-cores.outputs.count }} test_unit_arcticdb

      - name: Run C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/linux-conda-release-build/
          CTEST_OUTPUT_ON_FAILURE=1 make test

      - name: Install npm # Linux github runner image does not come with npm
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '16'

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          npm install -g azurite
          cd python
          export ARCTICDB_RAND_SEED=$RANDOM
          python -m pytest -n ${{ steps.cpu-cores.outputs.count }} tests
        env:
          ARCTICDB_USING_CONDA: 1

  stop-ec2-runner:
    needs: [start_ec2_runner, linux]
    if: ${{ always() }}
    uses: ./.github/workflows/ec2_runner_jobs.yml
    secrets: inherit
    permissions: write-all
    with:
      job_type: stop
      label: ${{ needs.start_ec2_runner.outputs.label }}
      ec2-instance-id: ${{ needs.start_ec2_runner.outputs.ec2-instance-id }}

  macos:
    strategy:
      matrix:
        include:
          - os: macos-13

      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: recursive

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1.1.0
        id: cpu-cores

      - name: Install Conda environment from environment_unix.yml
        uses: mamba-org/setup-micromamba@v1.6.0
        with:
          environment-file: environment_unix.yml
          environment-name: arcticdb
          init-shell: >-
            bash
          cache-environment: true
          post-cleanup: 'all'

      - name: Build ArcticDB with conda (ARCTICDB_USING_CONDA=1)
        shell: bash -l {0}
        run: |
          # Protocol buffers compilation require not using build isolation.
          python -m pip install --no-build-isolation --no-deps -v -e .
        env:
          ARCTICDB_USING_CONDA: 1
          ARCTICDB_BUILD_CPP_TESTS: 1
          ARCTICDB_PROTOC_VERS: "4"

      - name: Build C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/darwin-conda-release-build/
          make -j ${{ steps.cpu-cores.outputs.count }} arcticdb_rapidcheck_tests
          make -j ${{ steps.cpu-cores.outputs.count }} test_unit_arcticdb

      - name: Run C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/darwin-conda-release-build/
          CTEST_OUTPUT_ON_FAILURE=1 make test

      - name: Install npm
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '16'

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          npm install -g azurite
          cd python
          export ARCTICDB_RAND_SEED=$RANDOM
          python -m pytest -n ${{ steps.cpu-cores.outputs.count }} tests
        env:
          ARCTICDB_USING_CONDA: 1


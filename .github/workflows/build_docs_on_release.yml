name: "Build Docs on Release"

on:
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to add to the docs (e.g., v1.2.3)"
        required: true
env:
  VERSION: ${{ github.event.release.tag_name || inputs.version }}
run-name: "Build and Publish Docs for release ${{ github.event.release.tag_name || inputs.version }}"
jobs:
  check-inputs:
    name: Check inputs
    runs-on: ubuntu-latest
    environment: TestPypi  # For TAGGING_TOKEN secret
    outputs:
        version: ${{ steps.tag_name.outputs.tag }}
        latest: ${{ env.VERSION == steps.latest_tag.outputs.tag }}

    steps:
      - name: Get latest released tag
        id: latest_tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}
          regex: ^v\d+\.\d+\.\d+$
          sort-tags: true
          releases-only: true

      - name: Verify release tag
        id: tag_name
        run: |
          TAG_NAME=${{ env.VERSION }}
          if [[ ! $TAG_NAME =~ ^v[0-9]+(\.[0-9]+){2}$ ]]; then
            echo "Error: Release tag name is not in the correct format. Expected: vX.Y.Z, Actual: $TAG_NAME"
            exit 1
          fi
          echo "tag=${TAG_NAME#v}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.TAGGING_TOKEN }}
            ref: v${{ steps.tag_name.outputs.tag }}

      - name: Create docs tag
        id: create_docs_tag
        run: |
            DOCS_TAG_NAME=v${{ steps.tag_name.outputs.tag }}-docs
            git tag --force $DOCS_TAG_NAME
            git push --force origin $DOCS_TAG_NAME

  build-docs:
    needs: check-inputs
    name: "Build docs with version: ${{ needs.check-inputs.outputs.version }}, latest: ${{ needs.check-inputs.outputs.latest }}"
    uses: ./.github/workflows/docs_build.yml
    secrets: inherit
    permissions:
       contents: write
    with:
      version: ${{ needs.check-inputs.outputs.version }}
      latest: ${{ needs.check-inputs.outputs.latest == 'true' }}
      deploy: true

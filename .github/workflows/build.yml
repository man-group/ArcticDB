name: Build and Test
on:
  push:
    branches: ["**"]
    tags: [v**]
    paths:
      - .github/workflows/*.yml
      - build_tooling/**
      - cpp/**
      - python/**
      - setup.*
      - pyproject.toml
  workflow_dispatch:
    inputs:
      pypi_publish:
        type: boolean
      publish_env:
        description: Environment to publish to
        type: environment
      cmake_preset_type:
        description: Override CMAKE preset type
        type: choice
        options: ["-", debug, release]
run-name: Building ${{github.ref_name}} on ${{github.event_name}} by ${{github.actor}}
jobs:
  common_config:
    # Hacky way to supply common variables (as the env context is not available in jobs.*.with)
    runs-on: ubuntu-latest
    steps:
      - run: |
          if ${{startsWith(github.ref, 'refs/tags/v')}}; then
            # Can only upload to Pypi once per version, so only auto upload on tag builds:
            echo -e "PUBLISH_ENV=ProdPypi\nCMAKE_PRESET_TYPE=release\nPYPI_PUBLISH=1" | tee -a $GITHUB_ENV
          elif $GITHUB_REF_PROTECTED || ${{github.ref == 'refs/heads/master'}} ; then
            echo -e "PUBLISH_ENV=TestPypi\nCMAKE_PRESET_TYPE=release" | tee -a $GITHUB_ENV
          else
            echo -e "PUBLISH_ENV=${{vars.DEFAULT_PUBLISH_ENV}}\nCMAKE_PRESET_TYPE=$DEFAULT_PRESET" | tee -a $GITHUB_ENV
          fi
        env:
          DEFAULT_PRESET: ${{startsWith(github.repository, 'man-group/ArcticDB') && 'release' || vars.DEFAULT_CMAKE_PRESET_TYPE || 'debug'}}
    outputs:
      cibuildwheel_ver: "2.12.1"
      publish_env: ${{inputs.publish_env || env.PUBLISH_ENV || ''}}
      pypi_publish: ${{inputs.pypi_publish || env.PYPI_PUBLISH}}
      cmake_preset_type_resolved: ${{inputs.cmake_preset_type != '-' && inputs.cmake_preset_type || env.CMAKE_PRESET_TYPE}}
      # Full list CIBW supports: https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
      # If adding PyPy, then must rewrite the python_impl_name in build_steps.yaml
      linux_cibw_formats: '["cp3{0}-manylinux_x86_64"]'
      windows_cibw_formats: '["cp3{0}-win_amd64"]'
      linux_python_versions: ${{vars.LINUX_PYTHON_VERSIONS || '[6, 7, 8, 9, 10, 11]'}}
      windows_python_versions: ${{vars.WINDOWS_PYTHON_VERSIONS || '[7, 8, 9, 10, 11]'}}
      # Please declare any key you added below in build_steps.yaml:jobs.compile.strategy.matrix to aid the linting tools
      # Please update publish.yml if changing the symbols value!!
      linux_matrix: >-
        {"os":"linux", "distro":"\"ubuntu-latest\"", "pytest_distro": "${{vars.PYTEST_DISTRO_LINUX}}",
          "cmake_preset_prefix":"linux", "build_dir": "/tmp/cpp_build", "symbols": "*.gz",
          "do_not_archive": ["*.so", "*.[ao]", "vcpkg_installed"]}
      windows_matrix: >-
        {"os":"windows", "distro":"\"windows-latest\"", "pytest_distro": "${{vars.PYTEST_DISTRO_WINDOWS}}",
          "cmake_preset_prefix":"windows-cl", "build_dir": "C:\\cpp_build", "symbols": "*.pdb",
          "do_not_archive": ["*.lib", "*.ilk", "*.pyd", "*.dll", "CMakeFiles/*.dir", "vcpkg_installed"]}

  cibw_docker_image:
    needs: [common_config]
    uses: ./.github/workflows/cibw_docker_image.yml
    permissions: {packages: write}
    with:
      cibuildwheel_ver: ${{needs.common_config.outputs.cibuildwheel_ver}}
      force_update: false

  leader-compile-linux:
    # First do the C++ core compilation using one Python version to seed the compilation caches (and fail quicker)
    needs: [cibw_docker_image, common_config]
    name: Linux Compile
    uses: ./.github/workflows/build_steps.yml
    secrets: inherit
    permissions: {packages: write}
    with:
      job_type: leader-compile
      cmake_preset_type: ${{needs.common_config.outputs.cmake_preset_type_resolved}}
      cibw_image_tag: ${{needs.cibw_docker_image.outputs.tag}}
      matrix: ${{needs.common_config.outputs.linux_matrix}}

  leader-cpp-test-linux:
    # Compile and run the C++ tests separately concurrently with the following job
    needs: [leader-compile-linux, cibw_docker_image, common_config]
    name: Linux C++ Tests
    uses: ./.github/workflows/build_steps.yml
    secrets: inherit
    with:
      job_type: cpp-tests
      cmake_preset_type: ${{needs.common_config.outputs.cmake_preset_type_resolved}}
      cibw_image_tag: ${{needs.cibw_docker_image.outputs.tag}}
      matrix: ${{needs.common_config.outputs.linux_matrix}}

  follower-linux:
    # Then use the cached compilation artifacts to build other python versions concurrently in cibuildwheels
    needs: [leader-compile-linux, cibw_docker_image, common_config]
    strategy:
      fail-fast: false
      matrix:
        format: ${{fromJson(needs.common_config.outputs.linux_cibw_formats)}}
        python3: ${{fromJson(needs.common_config.outputs.linux_python_versions)}}
    name: 3.${{matrix.python3}} Linux
    uses: ./.github/workflows/build_steps.yml
    secrets: inherit
    permissions: {packages: write}
    with:
      job_type: follower
      python3: ${{matrix.python3}}
      cibw_build: ${{format(matrix.format, matrix.python3)}}
      cibw_image_tag: ${{needs.cibw_docker_image.outputs.tag}}
      cibw_version: ${{needs.common_config.outputs.cibuildwheel_ver}}
      cmake_preset_type: ${{needs.common_config.outputs.cmake_preset_type_resolved}}
      matrix: ${{needs.common_config.outputs.linux_matrix}}

  leader-compile-windows:
    needs: [common_config]
    name: Windows Compile
    uses: ./.github/workflows/build_steps.yml
    secrets: inherit
    permissions: {packages: write}
    with:
      job_type: leader-compile
      cmake_preset_type: ${{needs.common_config.outputs.cmake_preset_type_resolved}}
      matrix: ${{needs.common_config.outputs.windows_matrix}}

  leader-cpp-test-windows:
    needs: [leader-compile-windows, common_config]
    name: Windows C++ Tests
    uses: ./.github/workflows/build_steps.yml
    secrets: inherit
    with:
      job_type: cpp-tests
      cmake_preset_type: ${{needs.common_config.outputs.cmake_preset_type_resolved}}
      matrix: ${{needs.common_config.outputs.windows_matrix}}

  follower-windows:
    needs: [leader-compile-windows, common_config]
    strategy:
      fail-fast: false
      matrix:
        format: ${{fromJson(needs.common_config.outputs.windows_cibw_formats)}}
        python3: ${{fromJson(needs.common_config.outputs.windows_python_versions)}}
    name: 3.${{matrix.python3}} Windows
    uses: ./.github/workflows/build_steps.yml
    secrets: inherit
    permissions: {packages: write}
    with:
      job_type: follower
      python3: ${{matrix.python3}}
      cibw_build: ${{format(matrix.format, matrix.python3)}}
      cibw_version: ${{needs.common_config.outputs.cibuildwheel_ver}}
      cmake_preset_type: ${{needs.common_config.outputs.cmake_preset_type_resolved}}
      matrix: ${{needs.common_config.outputs.windows_matrix}}

  publish:
    needs: [common_config, leader-cpp-test-linux, leader-cpp-test-windows, follower-linux, follower-windows]
    if: needs.common_config.outputs.pypi_publish && needs.common_config.outputs.publish_env
    uses: ./.github/workflows/publish.yml
    secrets: inherit
    permissions: {contents: write}
    with:
      environment: ${{needs.common_config.outputs.publish_env}}

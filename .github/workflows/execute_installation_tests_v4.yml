name: Run Installation Tests v4

on:
  push:
    branches: 
      - installation_tests_v4
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating System to test'
        required: false
        default: 'ubuntu-22.04'
        type: choice
        options:
          - all
          - ubuntu-22.04
          - windows-latest
          - macos-latest
      python:
        description: 'Python Version to test'
        required: false
        default: '3.13'
        type: choice
        options:
          - "all"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
      arcticdb_version:
        # NOTE that for all versions listed here there must be pip and conda 
        #      requirements files at python/tests/compat folder!
        description: 'ArcticDB version to test'
        required: false
        default: 'latest'
        type: choice
        options:
          - "latest"
          - "5.2.6"
          - "5.1.2"
          - "5.0.0"
          - "4.5.1"
          - "1.6.2"
      run_on_lmdb:
        description: 'Execute tests on LMDB'
        required: true
        default: '1'
        type: choice
        options:
          - "1"
          - "0"
      run_on_real_s3:
        description: 'Execute tests on Amazon S3'
        required: true
        default: '0'
        type: choice
        options:
          - "1"
          - "0"
                  

jobs:

  test:
    runs-on: ${{ inputs.os != 'all' && inputs.os || matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-22.04, windows-latest, macos-latest]
        #python: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: ubuntu-22.04
            python: "3.7"
            use_conda: "no"
          - os: windows-latest
            python: "3.8"
            use_conda: "no"
          - os: macos-latest
            python: "3.9"
            use_conda: "yes"
          - os: windows-latest
            python: "3.10"
            use_conda: "no"
          - os: macos-latest
            python: "3.11"
            use_conda: "yes"
          - os: ubuntu-22.04
            python: "3.12"
            use_conda: "yes"
          - os: ubuntu-22.04
            use_conda: "no"
            python: "3.13"
      fail-fast: false  
    env:
      conda_file: "python/installation_tests/environment_unix.yml"
      arcticdb_version: ${{ inputs.arcticdb_version || '4.5.1' }}
      lmdb: ${{ inputs.run_on_lmdb || '1' }}
      real_s3: ${{ inputs.run_on_real_s3 || '1' }}

    steps:

    - name: Check Unsupported Versions
      shell: bash
      run: |
        echo "Check for not supported arcticdb-python versions"

        UNSUPPORTED_COMBINATIONS=("3.13-5.1.2" "3.13-5.0.0" "3.13-4.5.1")

        CURRENT_COMBINATION="${{ matrix.python || inputs.python}}-${{ env.arcticdb_version }}"
        echo "Check for combination $CURRENT_COMBINATION"
        if [[ " ${UNSUPPORTED_COMBINATIONS[*]} " == *"$CURRENT_COMBINATION"* ]]; then
          echo "Skipping unsupported combination: $CURRENT_COMBINATION"
          echo "SKIP_JOB=true" >> $GITHUB_ENV
        fi

    - name: Checkout code
      if: ${{ env.SKIP_JOB != 'true' }}
      uses: actions/checkout@v3

    - name: Set up Python
      if: ${{ env.SKIP_JOB != 'true' }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python || inputs.python}}

    - name: (pypi) Install arcticdb from requirements files 
      if: ${{ (env.SKIP_JOB != 'true') && (!contains(matrix.use_conda, 'yes'))}}
      run: |
        pip install -r "python/tests/compat/requirements-${{ env.arcticdb_version }}.txt"

    - name: (pypi) Install other prerequisites 
      if: ${{ (env.SKIP_JOB != 'true') && (!contains(matrix.use_conda, 'yes'))}}
      shell: bash -l {0}
      run: |
        python -m pip install --upgrade pip

        pip install wheel
        pip install setuptools
        pip install pytest
        pip install pytest-xdist

      # Install conda environment
    - name: (conda) Install arcticdb from conda-forge
      uses: mamba-org/setup-micromamba@v2.0.0
      if: ${{ (env.SKIP_JOB != 'true') && (contains(matrix.use_conda, 'yes'))}}
      with:
        environment-file: "python/tests/compat/requirements-${{ env.arcticdb_version }}.yml" 
        environment-name: arcticdb
        init-shell: >-
          bash
        cache-environment: true
        post-cleanup: 'all'

    - name: (conda) Install other dependencies ${{ env.conda_file }}
      if: ${{ (env.SKIP_JOB != 'true') && (contains(matrix.use_conda, 'yes'))}}
      shell: bash -l {0}
      run: |
          micromamba activate arcticdb
          micromamba install --no-pin --file ${{ env.conda_file }}
  
    - name: Set persistent storage variables
      if: ${{ env.SKIP_JOB != 'true' }}
      uses: ./.github/actions/set_persistent_storage_env_vars
      with:
        aws_access_key: "${{ secrets.AWS_S3_ACCESS_KEY }}"
        aws_secret_key: "${{ secrets.AWS_S3_SECRET_KEY }}"
        gcp_access_key: "${{ secrets.GCP_S3_ACCESS_KEY }}"
        gcp_secret_key: "${{ secrets.GCP_S3_SECRET_KEY }}"
        persistent_storage: "true"

    - name: Delete python/arcticdb directory
      if: ${{ env.SKIP_JOB != 'true' }}
      shell: bash -l {0}      
      run: |
        rm -rf python/arcticdb        
  
    - name: Build protobuf
      if: ${{ env.SKIP_JOB != 'true' }}
      shell: bash -l {0}      
      run: |
        python setup.py protoc --build-lib python        

    - name: Set environment variables 
      if: ${{ env.SKIP_JOB != 'true' }}
      shell: bash -l {0}      
      run: |
        echo "ARCTICDB_LOCAL_STORAGE_TESTS_ENABLED=0" >> $GITHUB_ENV
        echo "ARCTICDB_STORAGE_LMDB=${{ env.lmdb }}" >> $GITHUB_ENV
        echo "ARCTICDB_STORAGE_AWS_S3=${{ env.real_s3 }}" >> $GITHUB_ENV        
        echo "ARCTICDB_STORAGE_GCP=0" >> $GITHUB_ENV        
        echo "ARCTICDB_PERSISTENT_STORAGE_TESTS=1" >> $GITHUB_ENV

    - name: Run tests
      if: ${{ env.SKIP_JOB != 'true' }}
      shell: bash -l {0}      
      run: |
        echo $pwd
        echo "Running tests against arcticdb version: ${{ env.arcticdb_version }}"
        pytest -v --log-file="tests.log" -n auto python/installation_tests/test_installation.py
        
        ## For testing
        #pytest -v --log-file="tests.log" python/tests/integration/arcticdb/test_arctic.py::test_append_prune_previous_versions

    - name: Upload the logs
      if: ${{ env.SKIP_JOB != 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.os || inputs.os }}-${{ matrix.python || inputs.python}}
        path: |
          ./*test*        


          
name: build_steps
on:
  workflow_call:
    inputs:
      job_type:          {required: true, type: string, description: Usually caller job's name}
      python:            {required: true, type: string, description: Python version array as a JSON string}
      cmake_preset_type: {required: true, type: string, description: See the synonyms param in parent workflow}

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        os: [linux]
          # 20.04 has its GCC 10.3 back-ported to 18.04, so can share compiled libs with codespaces
        python: ${{fromJSON(inputs.python)}}
        include:
          - os: linux
            distro: ubuntu-20.04
            cmake_preset_prefix: linux
            compiler_env: CC=gcc-10\nCXX=g++-10
          # Windows is not included ATM because the build would run out of disk space ¯\_(ツ)_/¯
          #- os: windows
          #  distro: windows-latest
          #  cmake_preset_prefix: windows-cl

    name: ${{matrix.os}}-py${{matrix.python}}
    runs-on: ${{matrix.distro}}
    env:
      SCCACHE_GHA_VERSION: ${{vars.SCCACHE_GHA_VERSION || 1}} # Setting the env var enables the caching
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      ARCTIC_CMAKE_PRESET: ${{matrix.cmake_preset_prefix}}-${{inputs.cmake_preset_type}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          submodules: recursive # Just in case a dep has its own third-party deps

      - name: Setup script
        shell: bash
        run: |
          set -e
          echo -e "${{matrix.compiler_env}}" >> $GITHUB_ENV
          cd cpp/vcpkg ; git fetch --unshallow file://$VCPKG_INSTALLATION_ROOT; cd -

          which apt && sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            libpcre3-dev libsasl2-dev libsodium-dev libkrb5-dev ${{inputs.job_type == 'cpp-tests' && 'libcurl4-openssl-dev' || ''}}

      - name: Get Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python}}
          cache: 'pip'
          cache-dependency-path: |
            **/setup.cfg
            **/requirements*.txt
        # FUTURE: arcticdb_core and pybind needs Python to compile, but we should make it possible to do so without.
        # Eventually, only the Python build step should reference the python version.

      - name: Configure vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgJsonGlob: "cpp/vcpkg.json"
          vcpkgDirectory: ${{github.workspace}}/cpp/vcpkg
          # We use cmake to run vcpkg install as the action author suggests

      - name: Individual vcpkg caching
        shell: bash
        run: |
          nuget="`which mono` `cpp/vcpkg/vcpkg fetch nuget | tail -n 1`"
          url="https://nuget.pkg.github.com/$nuget_user/index.json"
          $nuget sources add -source $url -storepasswordincleartext -name github -username $nuget_user -password "${{secrets.GITHUB_TOKEN}}"
          $nuget setapikey "${{secrets.GITHUB_TOKEN}}" -source $url
        env:
          nuget_user: ${{vars.vcpkg_nuget_user || github.repository_owner}}

      - name: Get sccache
        uses: Xuanwo/sccache-action@c94e27bef21ab3fb4a5152c8a878c53262b4abb0 # FUTURE: use mozilla/ once it's merged
        with:
          version: "v0.4.0-pre.8"

      - name: CMake compile
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: ${{github.workspace}}/cpp/CMakeLists.txt
          configurePreset: ${{env.ARCTIC_CMAKE_PRESET}}
          buildPreset: ${{env.ARCTIC_CMAKE_PRESET}}
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: 2
          VCPKG_BINARY_SOURCES: 'clear;nuget,github,readwrite'

      - name: Python build
        run: python -m pip install -U pip && python -m pip install -e .

      - name: Compile C++ tests
        if: inputs.job_type == 'cpp-tests'
        run: cd cpp; cmake --build --preset $ARCTIC_CMAKE_PRESET --target install

      - name: c++ Rapidcheck
        if: inputs.job_type == 'cpp-tests'
        run: |
          chmod +x cpp/out/install/*test*
          cpp/out/install/arcticdb_rapidcheck_tests

      - name: C++ unit tests
        if: inputs.job_type == 'cpp-tests'
        run: "cpp/out/install/test_unit_arcticdb --gtest_filter=-TestNfsBackedStorage.*:TestS3Storage.*"

      - name: Python tests
        if: inputs.job_type == 'follower'
        shell: bash
        run: |
          set -e
          python -m pip install -e .[Testing]
          python -m pip install pytest-split
          cp .github/workflows/pytest-durations.json cpp/out/
          function worker() {
            python -m pytest -v --show-capture=no --log-file=cpp/out/pytest-logger.$1.log \
              --splits 2 --group $1 --durations-path=cpp/out/pytest-durations.json --store-durations \
              python/tests \
              | sed -r "s#^python/tests/([^/]+).*/([^/]+\.py)|^python/tests/|^#$1: \1 \2#" &
          }
          worker 1
          worker 2

      - name: Upload build metadata
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-metadata-${{inputs.job_type}}-${{matrix.distro}}-py${{matrix.python}}
          path: |
            cpp/out/*-build
            !**/*.[ao]
            !**/*.so
            !**/vcpkg_installed

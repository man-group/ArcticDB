name: build_steps
on:
  workflow_call:
    inputs:
      job_type:          {required: true, type: string, description: Usually caller job's name}
      cmake_preset_type: {required: true, type: string, description: See the synonyms param in parent workflow}
      cibw_image_tag:    {required: true, type: string, description: As built by cibw_docker_image.yml workflow}
      python:            {default: '(default)', type: string, description: Python version for followers}

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        os: [linux]
        include:
          - os: linux
            distro: ubuntu-latest
            cmake_preset_prefix: linux
            cibw_format: "cp{0}-manylinux_x86_64"
          # Windows is not included ATM because the build would run out of disk space ¯\_(ツ)_/¯
          #- os: windows
          #  distro: windows-latest
          #  cmake_preset_prefix: windows-cl

    name: build on ${{matrix.os}}
    runs-on: ${{matrix.distro}}
    container: ${{ (matrix.os == 'linux' && inputs.job_type != 'follower') && inputs.cibw_image_tag || null}}
    env:
      SCCACHE_GHA_VERSION: ${{vars.SCCACHE_GHA_VERSION || 1}} # Setting this env var enables the caching
      VCPKG_NUGET_USER: ${{secrets.VCPKG_NUGET_USER || github.repository_owner}}
      VCPKG_NUGET_TOKEN: ${{secrets.VCPKG_NUGET_TOKEN || secrets.GITHUB_TOKEN}}
      VCPKG_MAN_NUGET_USER: ${{secrets.VCPKG_MAN_NUGET_USER}} # For forks to download pre-compiled dependencies from the Man repo
      VCPKG_MAN_NUGET_TOKEN: ${{secrets.VCPKG_MAN_NUGET_TOKEN}}
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      ARCTIC_CMAKE_PRESET: ${{matrix.cmake_preset_prefix}}-${{inputs.cmake_preset_type}}
      CIBW_ENVIRONMENT_PASS_LINUX: SCCACHE_GHA_VERSION ACTIONS_CACHE_URL ACTIONS_RUNTIME_TOKEN
        VCPKG_BINARY_SOURCES VCPKG_NUGET_USER VCPKG_NUGET_TOKEN VCPKG_MAN_NUGET_USER VCPKG_MAN_NUGET_TOKEN
        CMAKE_C_COMPILER_LAUNCHER CMAKE_CXX_COMPILER_LAUNCHER CMAKE_BUILD_PARALLEL_LEVEL ARCTIC_CMAKE_PRESET
      CIBW_BUILD: ${{format(matrix.cibw_format, inputs.python)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          submodules: recursive # Just in case a dep has its own third-party deps

      - name: Extra envs
        run: |
          . build_tooling/vcpkg_caching.sh # Linux follower needs another call in CIBW
          echo -e "VCPKG_BINARY_SOURCES=$VCPKG_BINARY_SOURCES\n${{matrix.envs || ''}}" | tee -a $GITHUB_ENV

      - name: Configure sccache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.0"

      # ========================= Leader steps =========================
      - name: Prepare C++ compilation env
        if: inputs.job_type != 'follower'
        shell: bash
        run: |
          yum update -y && yum install -y python3-devel
        # The Python shipped with manylinux is missing the shared library necessary to build the tests

      - name: CMake compile
        if: inputs.job_type != 'follower'
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: ${{github.workspace}}/cpp/CMakeLists.txt
          configurePreset: ${{env.ARCTIC_CMAKE_PRESET}}
          configurePresetAdditionalArgs: "['-DPython_ROOT_DIR=/usr/lib64', '-DPython_EXECUTABLE=/usr/bin/python3']"
          buildPreset: ${{env.ARCTIC_CMAKE_PRESET}}

      - name: Compile C++ tests
        if: inputs.job_type == 'cpp-tests'
        run: cd cpp; cmake --build --preset $ARCTIC_CMAKE_PRESET --target install

      - name: C++ Rapidcheck
        if: inputs.job_type == 'cpp-tests'
        run: cpp/out/install/arcticdb_rapidcheck_tests

      - name: C++ unit tests
        if: inputs.job_type == 'cpp-tests'
        run: |
          yum install -y jq
          cd cpp/out
          install/test_unit_arcticdb --gtest_output=json:test_unit_arcticdb.json \
            --gtest_filter=-TestNfsBackedStorage.*:TestS3Storage.* || true
          [[ $(jq '.tests' test_unit_arcticdb.json) -gt 0 ]]
          [[ $(jq '.failures' test_unit_arcticdb.json) -eq 0 ]]
          [[ $(jq '.errors' test_unit_arcticdb.json) -eq 0 ]]
        env:
          ARCTICDB_memory_loglevel: INFO

      # ========================= Follower (CIBW) steps =========================
      - name: Get CIBuildWheel image & metadata
        if: inputs.job_type == 'follower'
        run: |
            docker login ghcr.io -u token -p "${{secrets.GITHUB_TOKEN}}"
            docker pull "${{inputs.cibw_image_tag}}"
            docker inspect --type=image "${{inputs.cibw_image_tag}}" \
              --format='cibw_version={{index .Config.Labels "io.arcticdb.cibw_ver"}}
            manylinux_image={{index .Config.Labels "io.arcticdb.base"}}' | tee -a $GITHUB_ENV

            find python/tests/* -maxdepth 0 -type d ! -name '__pycache__' ! -name 'util' -printf '"%f",' \
              | sed 's/^/test_dirs=[/ ; s/,$/]/' | tee -a $GITHUB_ENV

      - name: Build wheel
        if: inputs.job_type == 'follower'
        run: pipx run cibuildwheel==${{env.cibw_version}} --output-dir /tmp/wheel/
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: ${{inputs.cibw_image_tag}}

      - name: Store wheel artifact
        if: inputs.job_type == 'follower'
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{env.CIBW_BUILD}}
          path: /tmp/wheel/*.whl

      # ========================= Common =========================
      - name: Upload build metadata
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-metadata-${{inputs.job_type}}-${{matrix.os}}-cp${{inputs.python}}
          path: |
            cpp/out/*-build
            !**/*.[ao]
            !**/*.so
            !**/vcpkg_installed

    outputs:
      manylinux_image: ${{env.manylinux_image}}
      test_dirs: ${{env.test_dirs}}

  python_tests:
    if: inputs.job_type == 'follower'
    needs: [compile]
    strategy:
      fail-fast: false
      matrix:
        os: [linux]
        type: ${{fromJSON(needs.compile.outputs.test_dirs)}}
        include:
          - os: linux
            distro: ubuntu-latest
            cibw_format: "cp{0}-manylinux_x86_64"
          - type: hypothesis
            cmd: '{hypothesis,nonreg}' # There are so few nonreg tests, run them in the hypothesis runner
        exclude:
          - type: nonreg
    name: ${{matrix.type}} on ${{matrix.os}}
    runs-on: ${{matrix.distro}}
    container: ${{matrix.os == 'linux' && needs.compile.outputs.manylinux_image || null}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Get wheel artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-${{format(matrix.cibw_format, inputs.python)}}
          path: /tmp

      - name: Install the wheel and dependencies
        run: |
          set -e
          PATH="$(echo /opt/python/cp${{inputs.python}}*/bin):$PATH"
          echo "PATH=$PATH" | tee -a $GITHUB_ENV
          python -V
          python -m pip install /tmp/*cp${{inputs.python}}*.whl
          python -m pip install arcticdb[Testing] pytest-split
          python -m pip uninstall -y pytest-cpp || true # No longer works on 3.6

      - name: Run test
        run: build_tooling/parallel_test.sh tests/${{matrix.cmd || matrix.type}}
        env:
          test_output: /tmp

      - name: Upload the logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-${{matrix.os}}-cp${{inputs.python}}-${{matrix.type}}
          path: |
            /tmp/pytest-*.log
            /tmp/pytest-*.xml

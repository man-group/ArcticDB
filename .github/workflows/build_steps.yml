name: __build_steps
on:
  workflow_call:
    inputs:
      job_type:          {required: true, type: string, description: Selects the steps to enable}
      cmake_preset_type: {required: true, type: string, description: release/debug}
      matrix:            {required: true, type: string, description: JSON string to feed into the matrix}
      cibw_image_tag:    {required: false, type: string, description: Linux only. As built by cibw_docker_image.yml workflow}
      cibw_version:      {required: false, type: string, description: Follower only. Must match the cibw_image_tag}
      python3:           {default: -1, type: number, description: Python 3 minor version}
env:
  python_impl_name: ${{inputs.python3 > 0 && format('cp3{0}', inputs.python3) || 'default'}}
jobs:
  compile:
    strategy:
      matrix:
        include:
            - ${{fromJSON(inputs.matrix)}}

    runs-on: ${{matrix.distro}}
    container: ${{ (matrix.os == 'linux' && inputs.job_type != 'follower') && inputs.cibw_image_tag || null}}
    env:
      SCCACHE_GHA_VERSION: ${{vars.SCCACHE_GHA_VERSION || 1}} # Setting this env var enables the caching
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      ARCTIC_CMAKE_PRESET: ${{matrix.cmake_preset_prefix}}-${{inputs.cmake_preset_type}}
      VCPKG_BINARY_SOURCES: 'clear;nuget,github,readwrite'
      nuget_user: ${{vars.vcpkg_nuget_user || github.repository_owner}}
      nuget_token: ${{vars.vcpkg_nuget_token || secrets.GITHUB_TOKEN}}
      CIBW_ENVIRONMENT_PASS_LINUX: SCCACHE_GHA_VERSION ACTIONS_CACHE_URL ACTIONS_RUNTIME_TOKEN
        CMAKE_C_COMPILER_LAUNCHER CMAKE_CXX_COMPILER_LAUNCHER CMAKE_BUILD_PARALLEL_LEVEL
        ARCTIC_CMAKE_PRESET VCPKG_BINARY_SOURCES nuget_user nuget_token test_output
      CIBW_BUILD: ${{format(matrix.cibw_format, inputs.python3)}}
    defaults:
      run: {shell: bash}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          submodules: recursive # Just in case a dep has its own third-party deps

      - name: Deep checkout vcpkg
        run: |
          cd cpp/vcpkg ; git fetch --unshallow origin master

          echo -e "${{matrix.envs || ''}}" >> $GITHUB_ENV

      - name: Configure sccache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.0"

      # ========================= Leader steps =========================
      - name: Prepare C++ compilation env
        if: inputs.job_type != 'follower'
        run: |
          . build_tooling/vcpkg_caching.sh # Also applies to Windows

          if which yum ; then
            # The Python shipped with manylinux is missing the shared library necessary to build the tests
            yum update -y && yum install -y python3-devel
            echo "configure_add_args=['-DPython_ROOT_DIR=/usr/lib64', '-DPython_EXECUTABLE=/usr/bin/python3']" >> $GITHUB_ENV
          fi

      - name: CMake compile
        if: inputs.job_type != 'follower'
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: ${{github.workspace}}/cpp/CMakeLists.txt
          configurePreset: ${{env.ARCTIC_CMAKE_PRESET}}
          configurePresetAdditionalArgs: ${{env.configure_add_args}}
          buildPreset: ${{env.ARCTIC_CMAKE_PRESET}}

      - name: Compile C++ tests
        if: inputs.job_type == 'cpp-tests'
        run: cd cpp; cmake --build --preset $ARCTIC_CMAKE_PRESET --target install

      - name: C++ Rapidcheck
        if: inputs.job_type == 'cpp-tests'
        run: cpp/out/install/arcticdb_rapidcheck_tests

      - name: C++ unit tests
        if: inputs.job_type == 'cpp-tests'
        run: |
          cd cpp/out
          install/test_unit_arcticdb --gtest_output=json:test_unit_arcticdb.json \
            --gtest_filter=-TestNfsBackedStorage.*:TestS3Storage.* || true
          [[ $(jq '.tests' test_unit_arcticdb.json) -gt 0 ]]
          [[ $(jq '.failures' test_unit_arcticdb.json) -eq 0 ]]
          [[ $(jq '.errors' test_unit_arcticdb.json) -eq 0 ]]
        env:
          ARCTICDB_memory_loglevel: INFO

      # ========================= Follower (CIBW) steps =========================
      - name: Get CIBuildWheel image & metadata
        if: inputs.job_type == 'follower' && matrix.os == 'linux'
        run: |
            docker login ghcr.io -u token -p "${{secrets.GITHUB_TOKEN}}"
            docker pull "${{inputs.cibw_image_tag}}"
            docker inspect --type=image "${{inputs.cibw_image_tag}}" \
              --format='manylinux_image={{index .Config.Labels "io.arcticdb.base"}}' | tee -a $GITHUB_ENV

      - name: Build wheel
        if: inputs.job_type == 'follower'
        run: pipx run cibuildwheel==${{inputs.cibw_version}} --output-dir ${{runner.temp}}/wheel/
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: ${{inputs.cibw_image_tag}}

      - name: Store wheel artifact
        if: inputs.job_type == 'follower'
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{env.CIBW_BUILD}}
          path: ${{runner.temp}}/wheel/*.whl

      - name: Discover test directory names
        if: inputs.job_type == 'follower'
        run: find python/tests/* -maxdepth 0 -type d ! -name '__pycache__' ! -name 'util' -printf '"%f",' |
              sed 's/^/test_dirs=[/ ; s/,$/]/' | tee -a $GITHUB_ENV

      # ========================= Common =========================
      - name: Upload build metadata
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-metadata-${{inputs.job_type}}-${{matrix.os}}-${{env.python_impl_name}}
          path: |
            cpp/out/*-build
            !**/*.[ao]
            !**/*.so
            !**/vcpkg_installed

    outputs:
      manylinux_image: ${{env.manylinux_image}}
      test_dirs: ${{env.test_dirs}}

  python_tests:
    if: inputs.job_type == 'follower'
    needs: [compile]
    strategy:
      fail-fast: false
      matrix:
        type: ${{fromJSON(needs.compile.outputs.test_dirs)}}
        include:
          - ${{fromJSON(inputs.matrix)}}
          - type: hypothesis
            cmd: '{hypothesis,nonreg}' # There are so few nonreg tests, run them in the hypothesis runner
        exclude:
          - type: nonreg
    name: ${{matrix.type}}
    runs-on: ${{matrix.distro}}
    container: ${{matrix.os == 'linux' && needs.compile.outputs.manylinux_image || null}}
    defaults:
      run: {shell: bash}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Get wheel artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-${{format(matrix.cibw_format, inputs.python3)}}
          path: ${{runner.temp}}

      - name: Select Python (Linux)
        if: matrix.os == 'linux'
        run: echo /opt/python/${{env.python_impl_name}}*/bin >> $GITHUB_PATH

      - name: Select Python (Windows)
        if: matrix.os == 'windows'
        uses: actions/setup-python@v4
        with:
          python-version: "3.${{inputs.python3}}"

      - name: Install the wheel and dependencies
        run: |
          python -V
          cd '${{runner.temp}}' # Works for Windows-style paths as well
          python -m pip install *${{env.python_impl_name}}*.whl
          python -m pip install arcticdb[Testing] pytest-split
          python -m pip uninstall -y pytest-cpp || true # No longer works on 3.6

      - name: Run test
        run: build_tooling/parallel_test.sh tests/${{matrix.cmd || matrix.type}}
        env:
          test_output: ${{runner.temp}}

      - name: Upload the logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-${{matrix.os}}-${{env.python_impl_name}}-${{matrix.type}}
          path: |
            ${{runner.temp}}/pytest-*.log
            ${{runner.temp}}/pytest-*.xml
